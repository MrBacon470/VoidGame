{"version":3,"sources":["../node_modules/break_eternity.js/dist/break_eternity.esm.js","TS/Formatting.ts"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","MAX_SIGNIFICANT_DIGITS","EXP_LIMIT","LAYER_DOWN","Math","log10","FIRST_NEG_LAYER","NUMBER_EXP_MAX","NUMBER_EXP_MIN","MAX_ES_IN_A_ROW","powerOf10","powersOf10","push","Number","power","critical_headers","E","critical_tetr_values","critical_slog_values","D","value","Decimal","fromValue_noAlloc","FC","sign","layer","mag","fromComponents","FC_NN","fromComponents_noNormalize","decimalPlaces","places","len","numDigits","ceil","abs","rounded","round","pow","parseFloat","toFixed","max","f_maglog10","n","f_gamma","isFinite","trunc","NEGATIVE_INFINITY","scal1","l","log","n2","np","exp","OMEGA","f_lambertw","z","tol","w","wn","arguments","undefined","Error","concat","toString","d_lambertw","ew","wewz","dZero","dOne","ln","sub","mul","div","add","lt","NaN","fromDecimal","fromNumber","fromString","get","man","floor","residue","set","fromMantissaExponent","e","exponent","POSITIVE_INFINITY","m","absmag","signmag","normalize","mantissa","pentationparts","replace","split","_base","_height","heightparts","payload","result","pentate","tetrationparts","_base2","_height2","_heightparts","_payload","_result","tetrate","powparts","base","height","_base3","_exponent","_result2","ptparts","trim","toLowerCase","_payload2","_result3","_payload3","_result4","parts","ecount","numberAttempt","_numberAttempt","newparts","charAt","layerstring","chrcode","charCodeAt","substr","me","_result5","isNaN","repeat","toExponential","toStringWithDecimalPlaces","neg","decimal","a","b","maxabs","cmpabs","layera","layerb","magdiff","_magdiff","_mantissa","_magdiff2","_mantissa2","newmag","_newmag","recip","dNaN","cmp","_isFinite2","apply","eq","neq","gt","min","tolerance","eq_tolerance","cmp_tolerance","magA","magB","neq_tolerance","log2","absLog10","pow10","toNumber","gamma","t","lm","adj","l2","sqrt","this_num","negln","lambertw","iteratedlog","fracheight","lte","old_payload","next_payload","tetrate_critical","minus","plus","layeradd10","layeradd","_i","times","fraction","layerloss","dNegOne","copy","slog_critical","diff","_layeradd","slogthis","slogdest","slog","lnx","sin","cos","tan","asin","acos","atan","negate","sinh","cosh","sqr","gte","ascensions","root","other","fromMantissaExponent_noNormalize","fromValue","reciprocate","_isNaN","_x","_isFinite","_x2","notEquals","minabs","clamp","clampMin","clampMax","notEquals_tolerance","lt_tolerance","lte_tolerance","gt_tolerance","gte_tolerance","pLog10","logarithm","_other","factorial","lngamma","cube","cbrt","iteratedexp","ssqrt","resourcesAvailable","priceStart","priceRatio","currentOwned","affordGeometricSeries_core","numItems","sumGeometricSeries_core","priceAdd","affordArithmeticSeries_core","sumArithmeticSeries_core","cost","currentRpS","deltaRpS","efficiencyOfPurchase_core","maxLayers","random","randomsign","randomexp","randommag","actualStart","b2","critical_section","grid","lower","upper","basefrac","frac","dTwo","dTen","dInf","dNegInf","dNumberMax","MAX_VALUE","dNumberMin","MIN_VALUE"],"mappings":"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","file":"Formatting.5e4d6ee1.js","sourceRoot":"..\\src","sourcesContent":["function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar MAX_SIGNIFICANT_DIGITS = 17; //Maximum number of digits of precision to assume in Number\n\nvar EXP_LIMIT = 9e15; //If we're ABOVE this value, increase a layer. (9e15 is close to the largest integer that can fit in a Number.)\n\nvar LAYER_DOWN = Math.log10(9e15);\nvar FIRST_NEG_LAYER = 1 / 9e15; //At layer 0, smaller non-zero numbers than this become layer 1 numbers with negative mag. After that the pattern continues as normal.\n\nvar NUMBER_EXP_MAX = 308; //The largest exponent that can appear in a Number, though not all mantissas are valid here.\n\nvar NUMBER_EXP_MIN = -324; //The smallest exponent that can appear in a Number, though not all mantissas are valid here.\n\nvar MAX_ES_IN_A_ROW = 5; //For default toString behaviour, when to swap from eee... to (e^n) syntax.\n\nvar powerOf10 = function () {\n  // We need this lookup table because Math.pow(10, exponent)\n  // when exponent's absolute value is large is slightly inaccurate.\n  // You can fix it with the power of math... or just make a lookup table.\n  // Faster AND simpler\n  var powersOf10 = [];\n\n  for (var i = NUMBER_EXP_MIN + 1; i <= NUMBER_EXP_MAX; i++) {\n    powersOf10.push(Number(\"1e\" + i));\n  }\n\n  var indexOf0InPowersOf10 = 323;\n  return function (power) {\n    return powersOf10[power + indexOf0InPowersOf10];\n  };\n}(); //tetration/slog to real height stuff\n//background info and tables of values for critical functions taken here: https://github.com/Patashu/break_eternity.js/issues/22\n\n\nvar critical_headers = [2, Math.E, 3, 4, 5, 6, 7, 8, 9, 10];\nvar critical_tetr_values = [[1, 1.0891168053867777, 1.1789745164521264, 1.2701428397304229, 1.3632066654400328, 1.4587804913784246, 1.557523817412741, 1.660158301473385, 1.767487542936873, 1.8804205225512542, 2], [1, 1.11211143309340, 1.23103892493161, 1.35838369631113, 1.49605193039935, 1.64635423375119, 1.81213853570186, 1.99697132461829, 2.20538955455724, 2.44325744833852, Math.E //1.0\n], [1, 1.1187738849693603, 1.2464963939368214, 1.38527004705667, 1.5376664685821402, 1.7068895236551784, 1.897001227148399, 2.1132403089001035, 2.362480153784171, 2.6539010333870774, 3], [1, 1.1367350847096405, 1.2889510672956703, 1.4606478703324786, 1.6570295196661111, 1.8850062585672889, 2.1539465047453485, 2.476829779693097, 2.872061932789197, 3.3664204535587183, 4], [1, 1.1494592900767588, 1.319708228183931, 1.5166291280087583, 1.748171114438024, 2.0253263297298045, 2.3636668498288547, 2.7858359149579424, 3.3257226212448145, 4.035730287722532, 5], [1, 1.159225940787673, 1.343712473580932, 1.5611293155111927, 1.8221199554561318, 2.14183924486326, 2.542468319282638, 3.0574682501653316, 3.7390572020926873, 4.6719550537360774, 6], [1, 1.1670905356972596, 1.3632807444991446, 1.5979222279405536, 1.8842640123816674, 2.2416069644878687, 2.69893426559423, 3.3012632110403577, 4.121250340630164, 5.281493033448316, 7], [1, 1.1736630594087796, 1.379783782386201, 1.6292821855668218, 1.9378971836180754, 2.3289975651071977, 2.8384347394720835, 3.5232708454565906, 4.478242031114584, 5.868592169644505, 8], [1, 1.1793017514670474, 1.394054150657457, 1.65664127441059, 1.985170999970283, 2.4069682290577457, 2.9647310119960752, 3.7278665320924946, 4.814462547283592, 6.436522247411611, 9], [1, 1.18422737399915, 1.4066113788546144, 1.680911177655277, 2.027492094355525, 2.4775152854601967, 3.080455730250329, 3.918234505962507, 5.1332705696484595, 6.9878696918072905, 10]];\nvar critical_slog_values = [[-1, -0.9194161097107025, -0.8335625019330468, -0.7425599821143978, -0.6466611521029437, -0.5462617907227869, -0.4419033816638769, -0.3342645487554494, -0.224140440909962, -0.11241087890006762, 0], [-1, -0.90603157029014, -0.80786507256596, -0.70646669396340, -0.60294836853664, -0.49849837513117, -0.39430303318768, -0.29147201034755, -0.19097820800866, -0.09361896280296, 0 //1.0\n], [-1, -0.9021579584316141, -0.8005762598234203, -0.6964780623319391, -0.5911906810998454, -0.486050182576545, -0.3823089430815083, -0.28106046722897615, -0.1831906535795894, -0.08935809204418144, 0], [-1, -0.8917227442365535, -0.781258746326964, -0.6705130326902455, -0.5612813129406509, -0.4551067709033134, -0.35319256652135966, -0.2563741554088552, -0.1651412821106526, -0.0796919581982668, 0], [-1, -0.8843387974366064, -0.7678744063886243, -0.6529563724510552, -0.5415870994657841, -0.4352842206588936, -0.33504449124791424, -0.24138853420685147, -0.15445285440944467, -0.07409659641336663, 0], [-1, -0.8786709358426346, -0.7577735191184886, -0.6399546189952064, -0.527284921869926, -0.4211627631006314, -0.3223479611761232, -0.23107655627789858, -0.1472057700818259, -0.07035171210706326, 0], [-1, -0.8740862815291583, -0.7497032990976209, -0.6297119746181752, -0.5161838335958787, -0.41036238255751956, -0.31277212146489963, -0.2233976621705518, -0.1418697367979619, -0.06762117662323441, 0], [-1, -0.8702632331800649, -0.7430366914122081, -0.6213373075161548, -0.5072025698095242, -0.40171437727184167, -0.30517930701410456, -0.21736343968190863, -0.137710238299109, -0.06550774483471955, 0], [-1, -0.8670016295947213, -0.7373984232432306, -0.6143173985094293, -0.49973884395492807, -0.394584953527678, -0.2989649949848695, -0.21245647317021688, -0.13434688362382652, -0.0638072667348083, 0], [-1, -0.8641642839543857, -0.732534623168535, -0.6083127477059322, -0.4934049257184696, -0.3885773075899922, -0.29376029055315767, -0.2083678561173622, -0.13155653399373268, -0.062401588652553186, 0]];\n\nvar D = function D(value) {\n  return Decimal.fromValue_noAlloc(value);\n};\n\nvar FC = function FC(sign, layer, mag) {\n  return Decimal.fromComponents(sign, layer, mag);\n};\n\nvar FC_NN = function FC_NN(sign, layer, mag) {\n  return Decimal.fromComponents_noNormalize(sign, layer, mag);\n};\n\nvar decimalPlaces = function decimalPlaces(value, places) {\n  var len = places + 1;\n  var numDigits = Math.ceil(Math.log10(Math.abs(value)));\n  var rounded = Math.round(value * Math.pow(10, len - numDigits)) * Math.pow(10, numDigits - len);\n  return parseFloat(rounded.toFixed(Math.max(len - numDigits, 0)));\n};\n\nvar f_maglog10 = function f_maglog10(n) {\n  return Math.sign(n) * Math.log10(Math.abs(n));\n}; //from HyperCalc source code\n\n\nvar f_gamma = function f_gamma(n) {\n  if (!isFinite(n)) {\n    return n;\n  }\n\n  if (n < -50) {\n    if (n === Math.trunc(n)) {\n      return Number.NEGATIVE_INFINITY;\n    }\n\n    return 0;\n  }\n\n  var scal1 = 1;\n\n  while (n < 10) {\n    scal1 = scal1 * n;\n    ++n;\n  }\n\n  n -= 1;\n  var l = 0.9189385332046727; //0.5*Math.log(2*Math.PI)\n\n  l = l + (n + 0.5) * Math.log(n);\n  l = l - n;\n  var n2 = n * n;\n  var np = n;\n  l = l + 1 / (12 * np);\n  np = np * n2;\n  l = l + 1 / (360 * np);\n  np = np * n2;\n  l = l + 1 / (1260 * np);\n  np = np * n2;\n  l = l + 1 / (1680 * np);\n  np = np * n2;\n  l = l + 1 / (1188 * np);\n  np = np * n2;\n  l = l + 691 / (360360 * np);\n  np = np * n2;\n  l = l + 7 / (1092 * np);\n  np = np * n2;\n  l = l + 3617 / (122400 * np);\n  return Math.exp(l) / scal1;\n};\n\nvar OMEGA = 0.56714329040978387299997; // W(1, 0)\n//from https://math.stackexchange.com/a/465183\n// The evaluation can become inaccurate very close to the branch point\n\nvar f_lambertw = function f_lambertw(z) {\n  var tol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-10;\n  var w;\n  var wn;\n\n  if (!Number.isFinite(z)) {\n    return z;\n  }\n\n  if (z === 0) {\n    return z;\n  }\n\n  if (z === 1) {\n    return OMEGA;\n  }\n\n  if (z < 10) {\n    w = 0;\n  } else {\n    w = Math.log(z) - Math.log(Math.log(z));\n  }\n\n  for (var i = 0; i < 100; ++i) {\n    wn = (z * Math.exp(-w) + w * w) / (w + 1);\n\n    if (Math.abs(wn - w) < tol * Math.abs(wn)) {\n      return wn;\n    } else {\n      w = wn;\n    }\n  }\n\n  throw Error(\"Iteration failed to converge: \".concat(z.toString())); //return Number.NaN;\n}; //from https://github.com/scipy/scipy/blob/8dba340293fe20e62e173bdf2c10ae208286692f/scipy/special/lambertw.pxd\n// The evaluation can become inaccurate very close to the branch point\n// at ``-1/e``. In some corner cases, `lambertw` might currently\n// fail to converge, or can end up on the wrong branch.\n\n\nfunction d_lambertw(z) {\n  var tol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-10;\n  var w;\n  var ew, wewz, wn;\n\n  if (!Number.isFinite(z.mag)) {\n    return z;\n  }\n\n  if (z === Decimal.dZero) {\n    return z;\n  }\n\n  if (z === Decimal.dOne) {\n    //Split out this case because the asymptotic series blows up\n    return D(OMEGA);\n  }\n\n  Decimal.abs(z); //Get an initial guess for Halley's method\n\n  w = Decimal.ln(z); //Halley's method; see 5.9 in [1]\n\n  for (var i = 0; i < 100; ++i) {\n    ew = Decimal.exp(-w);\n    wewz = w.sub(z.mul(ew));\n    wn = w.sub(wewz.div(w.add(1).sub(w.add(2).mul(wewz).div(Decimal.mul(2, w).add(2)))));\n\n    if (Decimal.abs(wn.sub(w)).lt(Decimal.abs(wn).mul(tol))) {\n      return wn;\n    } else {\n      w = wn;\n    }\n  }\n\n  throw Error(\"Iteration failed to converge: \".concat(z.toString())); //return Decimal.dNaN;\n}\n/**\r\n * The Decimal's value is simply mantissa * 10^exponent.\r\n */\n\n\nvar Decimal = /*#__PURE__*/function () {\n  function Decimal(value) {\n    _classCallCheck(this, Decimal);\n\n    this.sign = Number.NaN;\n    this.mag = Number.NaN;\n    this.layer = Number.NaN;\n\n    if (value instanceof Decimal) {\n      this.fromDecimal(value);\n    } else if (typeof value === \"number\") {\n      this.fromNumber(value);\n    } else if (typeof value === \"string\") {\n      this.fromString(value);\n    } else {\n      this.sign = 0;\n      this.layer = 0;\n      this.mag = 0;\n    }\n  }\n\n  _createClass(Decimal, [{\n    key: \"m\",\n    get: function get() {\n      if (this.sign === 0) {\n        return 0;\n      } else if (this.layer === 0) {\n        var exp = Math.floor(Math.log10(this.mag)); //handle special case 5e-324\n\n        var man;\n\n        if (this.mag === 5e-324) {\n          man = 5;\n        } else {\n          man = this.mag / powerOf10(exp);\n        }\n\n        return this.sign * man;\n      } else if (this.layer === 1) {\n        var residue = this.mag - Math.floor(this.mag);\n        return this.sign * Math.pow(10, residue);\n      } else {\n        //mantissa stops being relevant past 1e9e15 / ee15.954\n        return this.sign;\n      }\n    },\n    set: function set(value) {\n      if (this.layer <= 2) {\n        this.fromMantissaExponent(value, this.e);\n      } else {\n        //don't even pretend mantissa is meaningful\n        this.sign = Math.sign(value);\n\n        if (this.sign === 0) {\n          this.layer === 0;\n          this.exponent === 0;\n        }\n      }\n    }\n  }, {\n    key: \"e\",\n    get: function get() {\n      if (this.sign === 0) {\n        return 0;\n      } else if (this.layer === 0) {\n        return Math.floor(Math.log10(this.mag));\n      } else if (this.layer === 1) {\n        return Math.floor(this.mag);\n      } else if (this.layer === 2) {\n        return Math.floor(Math.sign(this.mag) * Math.pow(10, Math.abs(this.mag)));\n      } else {\n        return this.mag * Number.POSITIVE_INFINITY;\n      }\n    },\n    set: function set(value) {\n      this.fromMantissaExponent(this.m, value);\n    }\n  }, {\n    key: \"s\",\n    get: function get() {\n      return this.sign;\n    },\n    set: function set(value) {\n      if (value === 0) {\n        this.sign = 0;\n        this.layer = 0;\n        this.mag = 0;\n      } else {\n        this.sign = value;\n      }\n    } // Object.defineProperty(Decimal.prototype, \"mantissa\", {\n\n  }, {\n    key: \"mantissa\",\n    get: function get() {\n      return this.m;\n    },\n    set: function set(value) {\n      this.m = value;\n    }\n  }, {\n    key: \"exponent\",\n    get: function get() {\n      return this.e;\n    },\n    set: function set(value) {\n      this.e = value;\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      /*\r\n      PSEUDOCODE:\r\n      Whenever we are partially 0 (sign is 0 or mag and layer is 0), make it fully 0.\r\n      Whenever we are at or hit layer 0, extract sign from negative mag.\r\n      If layer === 0 and mag < FIRST_NEG_LAYER (1/9e15), shift to 'first negative layer' (add layer, log10 mag).\r\n      While abs(mag) > EXP_LIMIT (9e15), layer += 1, mag = maglog10(mag).\r\n      While abs(mag) < LAYER_DOWN (15.954) and layer > 0, layer -= 1, mag = pow(10, mag).\r\n            When we're done, all of the following should be true OR one of the numbers is not IsFinite OR layer is not IsInteger (error state):\r\n      Any 0 is totally zero (0, 0, 0).\r\n      Anything layer 0 has mag 0 OR mag > 1/9e15 and < 9e15.\r\n      Anything layer 1 or higher has abs(mag) >= 15.954 and < 9e15.\r\n      We will assume in calculations that all Decimals are either erroneous or satisfy these criteria. (Otherwise: Garbage in, garbage out.)\r\n      */\n      if (this.sign === 0 || this.mag === 0 && this.layer === 0) {\n        this.sign = 0;\n        this.mag = 0;\n        this.layer = 0;\n        return this;\n      }\n\n      if (this.layer === 0 && this.mag < 0) {\n        //extract sign from negative mag at layer 0\n        this.mag = -this.mag;\n        this.sign = -this.sign;\n      } //Handle shifting from layer 0 to negative layers.\n\n\n      if (this.layer === 0 && this.mag < FIRST_NEG_LAYER) {\n        this.layer += 1;\n        this.mag = Math.log10(this.mag);\n        return this;\n      }\n\n      var absmag = Math.abs(this.mag);\n      var signmag = Math.sign(this.mag);\n\n      if (absmag >= EXP_LIMIT) {\n        this.layer += 1;\n        this.mag = signmag * Math.log10(absmag);\n        return this;\n      } else {\n        while (absmag < LAYER_DOWN && this.layer > 0) {\n          this.layer -= 1;\n\n          if (this.layer === 0) {\n            this.mag = Math.pow(10, this.mag);\n          } else {\n            this.mag = signmag * Math.pow(10, absmag);\n            absmag = Math.abs(this.mag);\n            signmag = Math.sign(this.mag);\n          }\n        }\n\n        if (this.layer === 0) {\n          if (this.mag < 0) {\n            //extract sign from negative mag at layer 0\n            this.mag = -this.mag;\n            this.sign = -this.sign;\n          } else if (this.mag === 0) {\n            //excessive rounding can give us all zeroes\n            this.sign = 0;\n          }\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"fromComponents\",\n    value: function fromComponents(sign, layer, mag) {\n      this.sign = sign;\n      this.layer = layer;\n      this.mag = mag;\n      this.normalize();\n      return this;\n    }\n  }, {\n    key: \"fromComponents_noNormalize\",\n    value: function fromComponents_noNormalize(sign, layer, mag) {\n      this.sign = sign;\n      this.layer = layer;\n      this.mag = mag;\n      return this;\n    }\n  }, {\n    key: \"fromMantissaExponent\",\n    value: function fromMantissaExponent(mantissa, exponent) {\n      this.layer = 1;\n      this.sign = Math.sign(mantissa);\n      mantissa = Math.abs(mantissa);\n      this.mag = exponent + Math.log10(mantissa);\n      this.normalize();\n      return this;\n    }\n  }, {\n    key: \"fromMantissaExponent_noNormalize\",\n    value: function fromMantissaExponent_noNormalize(mantissa, exponent) {\n      //The idea of 'normalizing' a break_infinity.js style Decimal doesn't really apply. So just do the same thing.\n      this.fromMantissaExponent(mantissa, exponent);\n      return this;\n    }\n  }, {\n    key: \"fromDecimal\",\n    value: function fromDecimal(value) {\n      this.sign = value.sign;\n      this.layer = value.layer;\n      this.mag = value.mag;\n      return this;\n    }\n  }, {\n    key: \"fromNumber\",\n    value: function fromNumber(value) {\n      this.mag = Math.abs(value);\n      this.sign = Math.sign(value);\n      this.layer = 0;\n      this.normalize();\n      return this;\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      {\n        value = value.replace(\",\", \"\");\n      } //Handle x^^^y format.\n\n\n      var pentationparts = value.split(\"^^^\");\n\n      if (pentationparts.length === 2) {\n        var _base = parseFloat(pentationparts[0]);\n\n        var _height = parseFloat(pentationparts[1]);\n\n        var heightparts = pentationparts[1].split(\";\");\n        var payload = 1;\n\n        if (heightparts.length === 2) {\n          payload = parseFloat(heightparts[1]);\n\n          if (!isFinite(payload)) {\n            payload = 1;\n          }\n        }\n\n        if (isFinite(_base) && isFinite(_height)) {\n          var result = Decimal.pentate(_base, _height, payload);\n          this.sign = result.sign;\n          this.layer = result.layer;\n          this.mag = result.mag;\n          return this;\n        }\n      } //Handle x^^y format.\n\n\n      var tetrationparts = value.split(\"^^\");\n\n      if (tetrationparts.length === 2) {\n        var _base2 = parseFloat(tetrationparts[0]);\n\n        var _height2 = parseFloat(tetrationparts[1]);\n\n        var _heightparts = tetrationparts[1].split(\";\");\n\n        var _payload = 1;\n\n        if (_heightparts.length === 2) {\n          _payload = parseFloat(_heightparts[1]);\n\n          if (!isFinite(_payload)) {\n            _payload = 1;\n          }\n        }\n\n        if (isFinite(_base2) && isFinite(_height2)) {\n          var _result = Decimal.tetrate(_base2, _height2, _payload);\n\n          this.sign = _result.sign;\n          this.layer = _result.layer;\n          this.mag = _result.mag;\n          return this;\n        }\n      } //Handle x^y format.\n\n\n      var powparts = value.split(\"^\");\n\n      if (powparts.length === 2) {\n        var _base3 = parseFloat(powparts[0]);\n\n        var _exponent = parseFloat(powparts[1]);\n\n        if (isFinite(_base3) && isFinite(_exponent)) {\n          var _result2 = Decimal.pow(_base3, _exponent);\n\n          this.sign = _result2.sign;\n          this.layer = _result2.layer;\n          this.mag = _result2.mag;\n          return this;\n        }\n      } //Handle various cases involving it being a Big Number.\n\n\n      value = value.trim().toLowerCase(); //handle X PT Y format.\n\n      var base;\n      var height;\n      var ptparts = value.split(\"pt\");\n\n      if (ptparts.length === 2) {\n        base = 10;\n        height = parseFloat(ptparts[0]);\n        ptparts[1] = ptparts[1].replace(\"(\", \"\");\n        ptparts[1] = ptparts[1].replace(\")\", \"\");\n\n        var _payload2 = parseFloat(ptparts[1]);\n\n        if (!isFinite(_payload2)) {\n          _payload2 = 1;\n        }\n\n        if (isFinite(base) && isFinite(height)) {\n          var _result3 = Decimal.tetrate(base, height, _payload2);\n\n          this.sign = _result3.sign;\n          this.layer = _result3.layer;\n          this.mag = _result3.mag;\n          return this;\n        }\n      } //handle XpY format (it's the same thing just with p).\n\n\n      ptparts = value.split(\"p\");\n\n      if (ptparts.length === 2) {\n        base = 10;\n        height = parseFloat(ptparts[0]);\n        ptparts[1] = ptparts[1].replace(\"(\", \"\");\n        ptparts[1] = ptparts[1].replace(\")\", \"\");\n\n        var _payload3 = parseFloat(ptparts[1]);\n\n        if (!isFinite(_payload3)) {\n          _payload3 = 1;\n        }\n\n        if (isFinite(base) && isFinite(height)) {\n          var _result4 = Decimal.tetrate(base, height, _payload3);\n\n          this.sign = _result4.sign;\n          this.layer = _result4.layer;\n          this.mag = _result4.mag;\n          return this;\n        }\n      }\n\n      var parts = value.split(\"e\");\n      var ecount = parts.length - 1; //Handle numbers that are exactly floats (0 or 1 es).\n\n      if (ecount === 0) {\n        var numberAttempt = parseFloat(value);\n\n        if (isFinite(numberAttempt)) {\n          return this.fromNumber(numberAttempt);\n        }\n      } else if (ecount === 1) {\n        //Very small numbers (\"2e-3000\" and so on) may look like valid floats but round to 0.\n        var _numberAttempt = parseFloat(value);\n\n        if (isFinite(_numberAttempt) && _numberAttempt !== 0) {\n          return this.fromNumber(_numberAttempt);\n        }\n      } //Handle new (e^N)X format.\n\n\n      var newparts = value.split(\"e^\");\n\n      if (newparts.length === 2) {\n        this.sign = 1;\n\n        if (newparts[0].charAt(0) == \"-\") {\n          this.sign = -1;\n        }\n\n        var layerstring = \"\";\n\n        for (var i = 0; i < newparts[1].length; ++i) {\n          var chrcode = newparts[1].charCodeAt(i);\n\n          if (chrcode >= 43 && chrcode <= 57 || chrcode === 101) {\n            //is \"0\" to \"9\" or \"+\" or \"-\" or \".\" or \"e\" (or \",\" or \"/\")\n            layerstring += newparts[1].charAt(i);\n          } //we found the end of the layer count\n          else {\n            this.layer = parseFloat(layerstring);\n            this.mag = parseFloat(newparts[1].substr(i + 1));\n            this.normalize();\n            return this;\n          }\n        }\n      }\n\n      if (ecount < 1) {\n        this.sign = 0;\n        this.layer = 0;\n        this.mag = 0;\n        return this;\n      }\n\n      var mantissa = parseFloat(parts[0]);\n\n      if (mantissa === 0) {\n        this.sign = 0;\n        this.layer = 0;\n        this.mag = 0;\n        return this;\n      }\n\n      var exponent = parseFloat(parts[parts.length - 1]); //handle numbers like AeBeC and AeeeeBeC\n\n      if (ecount >= 2) {\n        var me = parseFloat(parts[parts.length - 2]);\n\n        if (isFinite(me)) {\n          exponent *= Math.sign(me);\n          exponent += f_maglog10(me);\n        }\n      } //Handle numbers written like eee... (N es) X\n\n\n      if (!isFinite(mantissa)) {\n        this.sign = parts[0] === \"-\" ? -1 : 1;\n        this.layer = ecount;\n        this.mag = exponent;\n      } //Handle numbers written like XeY\n      else if (ecount === 1) {\n        this.sign = Math.sign(mantissa);\n        this.layer = 1; //Example: 2e10 is equal to 10^log10(2e10) which is equal to 10^(10+log10(2))\n\n        this.mag = exponent + Math.log10(Math.abs(mantissa));\n      } //Handle numbers written like Xeee... (N es) Y\n      else {\n        this.sign = Math.sign(mantissa);\n        this.layer = ecount;\n\n        if (ecount === 2) {\n          var _result5 = Decimal.mul(FC(1, 2, exponent), D(mantissa));\n\n          this.sign = _result5.sign;\n          this.layer = _result5.layer;\n          this.mag = _result5.mag;\n          return this;\n        } else {\n          //at eee and above, mantissa is too small to be recognizable!\n          this.mag = exponent;\n        }\n      }\n\n      this.normalize();\n      return this;\n    }\n  }, {\n    key: \"fromValue\",\n    value: function fromValue(value) {\n      if (value instanceof Decimal) {\n        return this.fromDecimal(value);\n      }\n\n      if (typeof value === \"number\") {\n        return this.fromNumber(value);\n      }\n\n      if (typeof value === \"string\") {\n        return this.fromString(value);\n      }\n\n      this.sign = 0;\n      this.layer = 0;\n      this.mag = 0;\n      return this;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (!Number.isFinite(this.layer)) {\n        return Number.NaN;\n      }\n\n      if (this.layer === 0) {\n        return this.sign * this.mag;\n      } else if (this.layer === 1) {\n        return this.sign * Math.pow(10, this.mag);\n      } //overflow for any normalized Decimal\n      else {\n        return this.mag > 0 ? this.sign > 0 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY : 0;\n      }\n    }\n  }, {\n    key: \"mantissaWithDecimalPlaces\",\n    value: function mantissaWithDecimalPlaces(places) {\n      // https://stackoverflow.com/a/37425022\n      if (isNaN(this.m)) {\n        return Number.NaN;\n      }\n\n      if (this.m === 0) {\n        return 0;\n      }\n\n      return decimalPlaces(this.m, places);\n    }\n  }, {\n    key: \"magnitudeWithDecimalPlaces\",\n    value: function magnitudeWithDecimalPlaces(places) {\n      // https://stackoverflow.com/a/37425022\n      if (isNaN(this.mag)) {\n        return Number.NaN;\n      }\n\n      if (this.mag === 0) {\n        return 0;\n      }\n\n      return decimalPlaces(this.mag, places);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (isNaN(this.layer) || isNaN(this.sign) || isNaN(this.mag)) {\n        return \"NaN\";\n      }\n\n      if (this.mag === Number.POSITIVE_INFINITY || this.layer === Number.POSITIVE_INFINITY) {\n        return this.sign === 1 ? \"Infinity\" : \"-Infinity\";\n      }\n\n      if (this.layer === 0) {\n        if (this.mag < 1e21 && this.mag > 1e-7 || this.mag === 0) {\n          return (this.sign * this.mag).toString();\n        }\n\n        return this.m + \"e\" + this.e;\n      } else if (this.layer === 1) {\n        return this.m + \"e\" + this.e;\n      } else {\n        //layer 2+\n        if (this.layer <= MAX_ES_IN_A_ROW) {\n          return (this.sign === -1 ? \"-\" : \"\") + \"e\".repeat(this.layer) + this.mag;\n        } else {\n          return (this.sign === -1 ? \"-\" : \"\") + \"(e^\" + this.layer + \")\" + this.mag;\n        }\n      }\n    }\n  }, {\n    key: \"toExponential\",\n    value: function toExponential(places) {\n      if (this.layer === 0) {\n        return (this.sign * this.mag).toExponential(places);\n      }\n\n      return this.toStringWithDecimalPlaces(places);\n    }\n  }, {\n    key: \"toFixed\",\n    value: function toFixed(places) {\n      if (this.layer === 0) {\n        return (this.sign * this.mag).toFixed(places);\n      }\n\n      return this.toStringWithDecimalPlaces(places);\n    }\n  }, {\n    key: \"toPrecision\",\n    value: function toPrecision(places) {\n      if (this.e <= -7) {\n        return this.toExponential(places - 1);\n      }\n\n      if (places > this.e) {\n        return this.toFixed(places - this.exponent - 1);\n      }\n\n      return this.toExponential(places - 1);\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.toString();\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"toStringWithDecimalPlaces\",\n    value: function toStringWithDecimalPlaces(places) {\n      if (this.layer === 0) {\n        if (this.mag < 1e21 && this.mag > 1e-7 || this.mag === 0) {\n          return (this.sign * this.mag).toFixed(places);\n        }\n\n        return decimalPlaces(this.m, places) + \"e\" + decimalPlaces(this.e, places);\n      } else if (this.layer === 1) {\n        return decimalPlaces(this.m, places) + \"e\" + decimalPlaces(this.e, places);\n      } else {\n        //layer 2+\n        if (this.layer <= MAX_ES_IN_A_ROW) {\n          return (this.sign === -1 ? \"-\" : \"\") + \"e\".repeat(this.layer) + decimalPlaces(this.mag, places);\n        } else {\n          return (this.sign === -1 ? \"-\" : \"\") + \"(e^\" + this.layer + \")\" + decimalPlaces(this.mag, places);\n        }\n      }\n    }\n  }, {\n    key: \"abs\",\n    value: function abs() {\n      return FC_NN(this.sign === 0 ? 0 : 1, this.layer, this.mag);\n    }\n  }, {\n    key: \"neg\",\n    value: function neg() {\n      return FC_NN(-this.sign, this.layer, this.mag);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      return this.neg();\n    }\n  }, {\n    key: \"negated\",\n    value: function negated() {\n      return this.neg();\n    } // public sign () {\n    //     return this.sign;\n    //   }\n\n  }, {\n    key: \"sgn\",\n    value: function sgn() {\n      return this.sign;\n    }\n  }, {\n    key: \"round\",\n    value: function round() {\n      if (this.mag < 0) {\n        return Decimal.dZero;\n      }\n\n      if (this.layer === 0) {\n        return FC(this.sign, 0, Math.round(this.mag));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"floor\",\n    value: function floor() {\n      if (this.mag < 0) {\n        return Decimal.dZero;\n      }\n\n      if (this.layer === 0) {\n        return FC(this.sign, 0, Math.floor(this.mag));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"ceil\",\n    value: function ceil() {\n      if (this.mag < 0) {\n        return Decimal.dZero;\n      }\n\n      if (this.layer === 0) {\n        return FC(this.sign, 0, Math.ceil(this.mag));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"trunc\",\n    value: function trunc() {\n      if (this.mag < 0) {\n        return Decimal.dZero;\n      }\n\n      if (this.layer === 0) {\n        return FC(this.sign, 0, Math.trunc(this.mag));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      var decimal = D(value); //inf/nan check\n\n      if (!Number.isFinite(this.layer)) {\n        return this;\n      }\n\n      if (!Number.isFinite(decimal.layer)) {\n        return decimal;\n      } //Special case - if one of the numbers is 0, return the other number.\n\n\n      if (this.sign === 0) {\n        return decimal;\n      }\n\n      if (decimal.sign === 0) {\n        return this;\n      } //Special case - Adding a number to its negation produces 0, no matter how large.\n\n\n      if (this.sign === -decimal.sign && this.layer === decimal.layer && this.mag === decimal.mag) {\n        return FC_NN(0, 0, 0);\n      }\n\n      var a;\n      var b; //Special case: If one of the numbers is layer 2 or higher, just take the bigger number.\n\n      if (this.layer >= 2 || decimal.layer >= 2) {\n        return this.maxabs(decimal);\n      }\n\n      if (Decimal.cmpabs(this, decimal) > 0) {\n        a = this;\n        b = decimal;\n      } else {\n        a = decimal;\n        b = this;\n      }\n\n      if (a.layer === 0 && b.layer === 0) {\n        return D(a.sign * a.mag + b.sign * b.mag);\n      }\n\n      var layera = a.layer * Math.sign(a.mag);\n      var layerb = b.layer * Math.sign(b.mag); //If one of the numbers is 2+ layers higher than the other, just take the bigger number.\n\n      if (layera - layerb >= 2) {\n        return a;\n      }\n\n      if (layera === 0 && layerb === -1) {\n        if (Math.abs(b.mag - Math.log10(a.mag)) > MAX_SIGNIFICANT_DIGITS) {\n          return a;\n        } else {\n          var magdiff = Math.pow(10, Math.log10(a.mag) - b.mag);\n          var mantissa = b.sign + a.sign * magdiff;\n          return FC(Math.sign(mantissa), 1, b.mag + Math.log10(Math.abs(mantissa)));\n        }\n      }\n\n      if (layera === 1 && layerb === 0) {\n        if (Math.abs(a.mag - Math.log10(b.mag)) > MAX_SIGNIFICANT_DIGITS) {\n          return a;\n        } else {\n          var _magdiff = Math.pow(10, a.mag - Math.log10(b.mag));\n\n          var _mantissa = b.sign + a.sign * _magdiff;\n\n          return FC(Math.sign(_mantissa), 1, Math.log10(b.mag) + Math.log10(Math.abs(_mantissa)));\n        }\n      }\n\n      if (Math.abs(a.mag - b.mag) > MAX_SIGNIFICANT_DIGITS) {\n        return a;\n      } else {\n        var _magdiff2 = Math.pow(10, a.mag - b.mag);\n\n        var _mantissa2 = b.sign + a.sign * _magdiff2;\n\n        return FC(Math.sign(_mantissa2), 1, b.mag + Math.log10(Math.abs(_mantissa2)));\n      }\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(value) {\n      return this.add(value);\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(value) {\n      return this.add(D(value).neg());\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(value) {\n      return this.sub(value);\n    }\n  }, {\n    key: \"minus\",\n    value: function minus(value) {\n      return this.sub(value);\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(value) {\n      var decimal = D(value); //inf/nan check\n\n      if (!Number.isFinite(this.layer)) {\n        return this;\n      }\n\n      if (!Number.isFinite(decimal.layer)) {\n        return decimal;\n      } //Special case - if one of the numbers is 0, return 0.\n\n\n      if (this.sign === 0 || decimal.sign === 0) {\n        return FC_NN(0, 0, 0);\n      } //Special case - Multiplying a number by its own reciprocal yields +/- 1, no matter how large.\n\n\n      if (this.layer === decimal.layer && this.mag === -decimal.mag) {\n        return FC_NN(this.sign * decimal.sign, 0, 1);\n      }\n\n      var a;\n      var b; //Which number is bigger in terms of its multiplicative distance from 1?\n\n      if (this.layer > decimal.layer || this.layer == decimal.layer && Math.abs(this.mag) > Math.abs(decimal.mag)) {\n        a = this;\n        b = decimal;\n      } else {\n        a = decimal;\n        b = this;\n      }\n\n      if (a.layer === 0 && b.layer === 0) {\n        return D(a.sign * b.sign * a.mag * b.mag);\n      } //Special case: If one of the numbers is layer 3 or higher or one of the numbers is 2+ layers bigger than the other, just take the bigger number.\n\n\n      if (a.layer >= 3 || a.layer - b.layer >= 2) {\n        return FC(a.sign * b.sign, a.layer, a.mag);\n      }\n\n      if (a.layer === 1 && b.layer === 0) {\n        return FC(a.sign * b.sign, 1, a.mag + Math.log10(b.mag));\n      }\n\n      if (a.layer === 1 && b.layer === 1) {\n        return FC(a.sign * b.sign, 1, a.mag + b.mag);\n      }\n\n      if (a.layer === 2 && b.layer === 1) {\n        var newmag = FC(Math.sign(a.mag), a.layer - 1, Math.abs(a.mag)).add(FC(Math.sign(b.mag), b.layer - 1, Math.abs(b.mag)));\n        return FC(a.sign * b.sign, newmag.layer + 1, newmag.sign * newmag.mag);\n      }\n\n      if (a.layer === 2 && b.layer === 2) {\n        var _newmag = FC(Math.sign(a.mag), a.layer - 1, Math.abs(a.mag)).add(FC(Math.sign(b.mag), b.layer - 1, Math.abs(b.mag)));\n\n        return FC(a.sign * b.sign, _newmag.layer + 1, _newmag.sign * _newmag.mag);\n      }\n\n      throw Error(\"Bad arguments to mul: \" + this + \", \" + value);\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(value) {\n      return this.mul(value);\n    }\n  }, {\n    key: \"times\",\n    value: function times(value) {\n      return this.mul(value);\n    }\n  }, {\n    key: \"div\",\n    value: function div(value) {\n      var decimal = D(value);\n      return this.mul(decimal.recip());\n    }\n  }, {\n    key: \"divide\",\n    value: function divide(value) {\n      return this.div(value);\n    }\n  }, {\n    key: \"divideBy\",\n    value: function divideBy(value) {\n      return this.div(value);\n    }\n  }, {\n    key: \"dividedBy\",\n    value: function dividedBy(value) {\n      return this.div(value);\n    }\n  }, {\n    key: \"recip\",\n    value: function recip() {\n      if (this.mag === 0) {\n        return Decimal.dNaN;\n      } else if (this.layer === 0) {\n        return FC(this.sign, 0, 1 / this.mag);\n      } else {\n        return FC(this.sign, this.layer, -this.mag);\n      }\n    }\n  }, {\n    key: \"reciprocal\",\n    value: function reciprocal() {\n      return this.recip();\n    }\n  }, {\n    key: \"reciprocate\",\n    value: function reciprocate() {\n      return this.recip();\n    }\n    /**\r\n     * -1 for less than value, 0 for equals value, 1 for greater than value\r\n     */\n\n  }, {\n    key: \"cmp\",\n    value: function cmp(value) {\n      var decimal = D(value);\n\n      if (this.sign > decimal.sign) {\n        return 1;\n      }\n\n      if (this.sign < decimal.sign) {\n        return -1;\n      }\n\n      return this.sign * this.cmpabs(value);\n    }\n  }, {\n    key: \"cmpabs\",\n    value: function cmpabs(value) {\n      var decimal = D(value);\n      var layera = this.mag > 0 ? this.layer : -this.layer;\n      var layerb = decimal.mag > 0 ? decimal.layer : -decimal.layer;\n\n      if (layera > layerb) {\n        return 1;\n      }\n\n      if (layera < layerb) {\n        return -1;\n      }\n\n      if (this.mag > decimal.mag) {\n        return 1;\n      }\n\n      if (this.mag < decimal.mag) {\n        return -1;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(value) {\n      return this.cmp(value);\n    }\n  }, {\n    key: \"isNan\",\n    value: function isNan() {\n      return isNaN(this.sign) || isNaN(this.layer) || isNaN(this.mag);\n    }\n  }, {\n    key: \"isFinite\",\n    value: function (_isFinite2) {\n      function isFinite() {\n        return _isFinite2.apply(this, arguments);\n      }\n\n      isFinite.toString = function () {\n        return _isFinite2.toString();\n      };\n\n      return isFinite;\n    }(function () {\n      return isFinite(this.sign) && isFinite(this.layer) && isFinite(this.mag);\n    })\n  }, {\n    key: \"eq\",\n    value: function eq(value) {\n      var decimal = D(value);\n      return this.sign === decimal.sign && this.layer === decimal.layer && this.mag === decimal.mag;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(value) {\n      return this.eq(value);\n    }\n  }, {\n    key: \"neq\",\n    value: function neq(value) {\n      return !this.eq(value);\n    }\n  }, {\n    key: \"notEquals\",\n    value: function notEquals(value) {\n      return this.neq(value);\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(value) {\n      D(value); // FIXME: Remove?\n\n      return this.cmp(value) === -1;\n    }\n  }, {\n    key: \"lte\",\n    value: function lte(value) {\n      return !this.gt(value);\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(value) {\n      D(value); // FIXME: Remove?\n\n      return this.cmp(value) === 1;\n    }\n  }, {\n    key: \"gte\",\n    value: function gte(value) {\n      return !this.lt(value);\n    }\n  }, {\n    key: \"max\",\n    value: function max(value) {\n      var decimal = D(value);\n      return this.lt(decimal) ? decimal : this;\n    }\n  }, {\n    key: \"min\",\n    value: function min(value) {\n      var decimal = D(value);\n      return this.gt(decimal) ? decimal : this;\n    }\n  }, {\n    key: \"maxabs\",\n    value: function maxabs(value) {\n      var decimal = D(value);\n      return this.cmpabs(decimal) < 0 ? decimal : this;\n    }\n  }, {\n    key: \"minabs\",\n    value: function minabs(value) {\n      var decimal = D(value);\n      return this.cmpabs(decimal) > 0 ? decimal : this;\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(min, max) {\n      return this.max(min).min(max);\n    }\n  }, {\n    key: \"clampMin\",\n    value: function clampMin(min) {\n      return this.max(min);\n    }\n  }, {\n    key: \"clampMax\",\n    value: function clampMax(max) {\n      return this.min(max);\n    }\n  }, {\n    key: \"cmp_tolerance\",\n    value: function cmp_tolerance(value, tolerance) {\n      var decimal = D(value);\n      return this.eq_tolerance(decimal, tolerance) ? 0 : this.cmp(decimal);\n    }\n  }, {\n    key: \"compare_tolerance\",\n    value: function compare_tolerance(value, tolerance) {\n      return this.cmp_tolerance(value, tolerance);\n    }\n    /**\r\n     * Tolerance is a relative tolerance, multiplied by the greater of the magnitudes of the two arguments.\r\n     * For example, if you put in 1e-9, then any number closer to the\r\n     * larger number than (larger number)*1e-9 will be considered equal.\r\n     */\n\n  }, {\n    key: \"eq_tolerance\",\n    value: function eq_tolerance(value, tolerance) {\n      var decimal = D(value); // https://stackoverflow.com/a/33024979\n\n      if (tolerance == null) {\n        tolerance = 1e-7;\n      } //Numbers that are too far away are never close.\n\n\n      if (this.sign !== decimal.sign) {\n        return false;\n      }\n\n      if (Math.abs(this.layer - decimal.layer) > 1) {\n        return false;\n      } // return abs(a-b) <= tolerance * max(abs(a), abs(b))\n\n\n      var magA = this.mag;\n      var magB = decimal.mag;\n\n      if (this.layer > decimal.layer) {\n        magB = f_maglog10(magB);\n      }\n\n      if (this.layer < decimal.layer) {\n        magA = f_maglog10(magA);\n      }\n\n      return Math.abs(magA - magB) <= tolerance * Math.max(Math.abs(magA), Math.abs(magB));\n    }\n  }, {\n    key: \"equals_tolerance\",\n    value: function equals_tolerance(value, tolerance) {\n      return this.eq_tolerance(value, tolerance);\n    }\n  }, {\n    key: \"neq_tolerance\",\n    value: function neq_tolerance(value, tolerance) {\n      return !this.eq_tolerance(value, tolerance);\n    }\n  }, {\n    key: \"notEquals_tolerance\",\n    value: function notEquals_tolerance(value, tolerance) {\n      return this.neq_tolerance(value, tolerance);\n    }\n  }, {\n    key: \"lt_tolerance\",\n    value: function lt_tolerance(value, tolerance) {\n      var decimal = D(value);\n      return !this.eq_tolerance(decimal, tolerance) && this.lt(decimal);\n    }\n  }, {\n    key: \"lte_tolerance\",\n    value: function lte_tolerance(value, tolerance) {\n      var decimal = D(value);\n      return this.eq_tolerance(decimal, tolerance) || this.lt(decimal);\n    }\n  }, {\n    key: \"gt_tolerance\",\n    value: function gt_tolerance(value, tolerance) {\n      var decimal = D(value);\n      return !this.eq_tolerance(decimal, tolerance) && this.gt(decimal);\n    }\n  }, {\n    key: \"gte_tolerance\",\n    value: function gte_tolerance(value, tolerance) {\n      var decimal = D(value);\n      return this.eq_tolerance(decimal, tolerance) || this.gt(decimal);\n    }\n  }, {\n    key: \"pLog10\",\n    value: function pLog10() {\n      if (this.lt(Decimal.dZero)) {\n        return Decimal.dZero;\n      }\n\n      return this.log10();\n    }\n  }, {\n    key: \"absLog10\",\n    value: function absLog10() {\n      if (this.sign === 0) {\n        return Decimal.dNaN;\n      } else if (this.layer > 0) {\n        return FC(Math.sign(this.mag), this.layer - 1, Math.abs(this.mag));\n      } else {\n        return FC(1, 0, Math.log10(this.mag));\n      }\n    }\n  }, {\n    key: \"log10\",\n    value: function log10() {\n      if (this.sign <= 0) {\n        return Decimal.dNaN;\n      } else if (this.layer > 0) {\n        return FC(Math.sign(this.mag), this.layer - 1, Math.abs(this.mag));\n      } else {\n        return FC(this.sign, 0, Math.log10(this.mag));\n      }\n    }\n  }, {\n    key: \"log\",\n    value: function log(base) {\n      base = D(base);\n\n      if (this.sign <= 0) {\n        return Decimal.dNaN;\n      }\n\n      if (base.sign <= 0) {\n        return Decimal.dNaN;\n      }\n\n      if (base.sign === 1 && base.layer === 0 && base.mag === 1) {\n        return Decimal.dNaN;\n      } else if (this.layer === 0 && base.layer === 0) {\n        return FC(this.sign, 0, Math.log(this.mag) / Math.log(base.mag));\n      }\n\n      return Decimal.div(this.log10(), base.log10());\n    }\n  }, {\n    key: \"log2\",\n    value: function log2() {\n      if (this.sign <= 0) {\n        return Decimal.dNaN;\n      } else if (this.layer === 0) {\n        return FC(this.sign, 0, Math.log2(this.mag));\n      } else if (this.layer === 1) {\n        return FC(Math.sign(this.mag), 0, Math.abs(this.mag) * 3.321928094887362); //log2(10)\n      } else if (this.layer === 2) {\n        return FC(Math.sign(this.mag), 1, Math.abs(this.mag) + 0.5213902276543247); //-log10(log10(2))\n      } else {\n        return FC(Math.sign(this.mag), this.layer - 1, Math.abs(this.mag));\n      }\n    }\n  }, {\n    key: \"ln\",\n    value: function ln() {\n      if (this.sign <= 0) {\n        return Decimal.dNaN;\n      } else if (this.layer === 0) {\n        return FC(this.sign, 0, Math.log(this.mag));\n      } else if (this.layer === 1) {\n        return FC(Math.sign(this.mag), 0, Math.abs(this.mag) * 2.302585092994046); //ln(10)\n      } else if (this.layer === 2) {\n        return FC(Math.sign(this.mag), 1, Math.abs(this.mag) + 0.36221568869946325); //log10(log10(e))\n      } else {\n        return FC(Math.sign(this.mag), this.layer - 1, Math.abs(this.mag));\n      }\n    }\n  }, {\n    key: \"logarithm\",\n    value: function logarithm(base) {\n      return this.log(base);\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(value) {\n      var decimal = D(value);\n      var a = this;\n      var b = decimal; //special case: if a is 0, then return 0 (UNLESS b is 0, then return 1)\n\n      if (a.sign === 0) {\n        return b.eq(0) ? FC_NN(1, 0, 1) : a;\n      } //special case: if a is 1, then return 1\n\n\n      if (a.sign === 1 && a.layer === 0 && a.mag === 1) {\n        return a;\n      } //special case: if b is 0, then return 1\n\n\n      if (b.sign === 0) {\n        return FC_NN(1, 0, 1);\n      } //special case: if b is 1, then return a\n\n\n      if (b.sign === 1 && b.layer === 0 && b.mag === 1) {\n        return a;\n      }\n\n      var result = a.absLog10().mul(b).pow10();\n\n      if (this.sign === -1) {\n        if (Math.abs(b.toNumber() % 2) % 2 === 1) {\n          return result.neg();\n        } else if (Math.abs(b.toNumber() % 2) % 2 === 0) {\n          return result;\n        }\n\n        return Decimal.dNaN;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"pow10\",\n    value: function pow10() {\n      /*\r\n      There are four cases we need to consider:\r\n      1) positive sign, positive mag (e15, ee15): +1 layer (e.g. 10^15 becomes e15, 10^e15 becomes ee15)\r\n      2) negative sign, positive mag (-e15, -ee15): +1 layer but sign and mag sign are flipped (e.g. 10^-15 becomes e-15, 10^-e15 becomes ee-15)\r\n      3) positive sign, negative mag (e-15, ee-15): layer 0 case would have been handled in the Math.pow check, so just return 1\r\n      4) negative sign, negative mag (-e-15, -ee-15): layer 0 case would have been handled in the Math.pow check, so just return 1\r\n      */\n      if (!Number.isFinite(this.layer) || !Number.isFinite(this.mag)) {\n        return Decimal.dNaN;\n      }\n\n      var a = this; //handle layer 0 case - if no precision is lost just use Math.pow, else promote one layer\n\n      if (a.layer === 0) {\n        var newmag = Math.pow(10, a.sign * a.mag);\n\n        if (Number.isFinite(newmag) && Math.abs(newmag) >= 0.1) {\n          return FC(1, 0, newmag);\n        } else {\n          if (a.sign === 0) {\n            return Decimal.dOne;\n          } else {\n            a = FC_NN(a.sign, a.layer + 1, Math.log10(a.mag));\n          }\n        }\n      } //handle all 4 layer 1+ cases individually\n\n\n      if (a.sign > 0 && a.mag >= 0) {\n        return FC(a.sign, a.layer + 1, a.mag);\n      }\n\n      if (a.sign < 0 && a.mag >= 0) {\n        return FC(-a.sign, a.layer + 1, -a.mag);\n      } //both the negative mag cases are identical: one +/- rounding error\n\n\n      return Decimal.dOne;\n    }\n  }, {\n    key: \"pow_base\",\n    value: function pow_base(value) {\n      return D(value).pow(this);\n    }\n  }, {\n    key: \"root\",\n    value: function root(value) {\n      var decimal = D(value);\n      return this.pow(decimal.recip());\n    }\n  }, {\n    key: \"factorial\",\n    value: function factorial() {\n      if (this.mag < 0) {\n        return this.add(1).gamma();\n      } else if (this.layer === 0) {\n        return this.add(1).gamma();\n      } else if (this.layer === 1) {\n        return Decimal.exp(Decimal.mul(this, Decimal.ln(this).sub(1)));\n      } else {\n        return Decimal.exp(this);\n      }\n    } //from HyperCalc source code\n\n  }, {\n    key: \"gamma\",\n    value: function gamma() {\n      if (this.mag < 0) {\n        return this.recip();\n      } else if (this.layer === 0) {\n        if (this.lt(FC_NN(1, 0, 24))) {\n          return D(f_gamma(this.sign * this.mag));\n        }\n\n        var t = this.mag - 1;\n        var l = 0.9189385332046727; //0.5*Math.log(2*Math.PI)\n\n        l = l + (t + 0.5) * Math.log(t);\n        l = l - t;\n        var n2 = t * t;\n        var np = t;\n        var lm = 12 * np;\n        var adj = 1 / lm;\n        var l2 = l + adj;\n\n        if (l2 === l) {\n          return Decimal.exp(l);\n        }\n\n        l = l2;\n        np = np * n2;\n        lm = 360 * np;\n        adj = 1 / lm;\n        l2 = l - adj;\n\n        if (l2 === l) {\n          return Decimal.exp(l);\n        }\n\n        l = l2;\n        np = np * n2;\n        lm = 1260 * np;\n        var lt = 1 / lm;\n        l = l + lt;\n        np = np * n2;\n        lm = 1680 * np;\n        lt = 1 / lm;\n        l = l - lt;\n        return Decimal.exp(l);\n      } else if (this.layer === 1) {\n        return Decimal.exp(Decimal.mul(this, Decimal.ln(this).sub(1)));\n      } else {\n        return Decimal.exp(this);\n      }\n    }\n  }, {\n    key: \"lngamma\",\n    value: function lngamma() {\n      return this.gamma().ln();\n    }\n  }, {\n    key: \"exp\",\n    value: function exp() {\n      if (this.mag < 0) {\n        return Decimal.dOne;\n      }\n\n      if (this.layer === 0 && this.mag <= 709.7) {\n        return D(Math.exp(this.sign * this.mag));\n      } else if (this.layer === 0) {\n        return FC(1, 1, this.sign * Math.log10(Math.E) * this.mag);\n      } else if (this.layer === 1) {\n        return FC(1, 2, this.sign * (Math.log10(0.4342944819032518) + this.mag));\n      } else {\n        return FC(1, this.layer + 1, this.sign * this.mag);\n      }\n    }\n  }, {\n    key: \"sqr\",\n    value: function sqr() {\n      return this.pow(2);\n    }\n  }, {\n    key: \"sqrt\",\n    value: function sqrt() {\n      if (this.layer === 0) {\n        return D(Math.sqrt(this.sign * this.mag));\n      } else if (this.layer === 1) {\n        return FC(1, 2, Math.log10(this.mag) - 0.3010299956639812);\n      } else {\n        var result = Decimal.div(FC_NN(this.sign, this.layer - 1, this.mag), FC_NN(1, 0, 2));\n        result.layer += 1;\n        result.normalize();\n        return result;\n      }\n    }\n  }, {\n    key: \"cube\",\n    value: function cube() {\n      return this.pow(3);\n    }\n  }, {\n    key: \"cbrt\",\n    value: function cbrt() {\n      return this.pow(1 / 3);\n    } //Tetration/tetrate: The result of exponentiating 'this' to 'this' 'height' times in a row.  https://en.wikipedia.org/wiki/Tetration\n    //If payload != 1, then this is 'iterated exponentiation', the result of exping (payload) to base (this) (height) times. https://andydude.github.io/tetration/archives/tetration2/ident.html\n    //Works with negative and positive real heights.\n\n  }, {\n    key: \"tetrate\",\n    value: function tetrate() {\n      var height = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FC_NN(1, 0, 1);\n\n      //x^^1 == x\n      if (height === 1) {\n        return Decimal.pow(this, payload);\n      } //x^^0 == 1\n\n\n      if (height === 0) {\n        return new Decimal(payload);\n      } //1^^x == 1\n\n\n      if (this.eq(Decimal.dOne)) {\n        return Decimal.dOne;\n      } //-1^^x == -1\n\n\n      if (this.eq(-1)) {\n        return Decimal.pow(this, payload);\n      }\n\n      if (height === Number.POSITIVE_INFINITY) {\n        var this_num = this.toNumber(); //within the convergence range?\n\n        if (this_num <= 1.44466786100976613366 && this_num >= 0.06598803584531253708) {\n          //hotfix for the very edge of the number range not being handled properly\n          if (this_num > 1.444667861009099) {\n            return new Decimal(Math.E);\n          } //Formula for infinite height power tower.\n\n\n          var negln = Decimal.ln(this).neg();\n          return negln.lambertw().div(negln);\n        } else if (this_num > 1.44466786100976613366) {\n          //explodes to infinity\n          return new Decimal(Number.POSITIVE_INFINITY);\n        } else {\n          //0.06598803584531253708 > this_num >= 0: never converges\n          //this_num < 0: quickly becomes a complex number\n          return Decimal.dNaN;\n        }\n      } //0^^x oscillates if we define 0^0 == 1 (which in javascript land we do), since then 0^^1 is 0, 0^^2 is 1, 0^^3 is 0, etc. payload is ignored\n      //using the linear approximation for height (TODO: don't know a better way to calculate it ATM, but it wouldn't surprise me if it's just NaN)\n\n\n      if (this.eq(Decimal.dZero)) {\n        var result = Math.abs((height + 1) % 2);\n\n        if (result > 1) {\n          result = 2 - result;\n        }\n\n        return new Decimal(result);\n      }\n\n      if (height < 0) {\n        return Decimal.iteratedlog(payload, this, -height);\n      }\n\n      payload = D(payload);\n      var oldheight = height;\n      height = Math.trunc(height);\n      var fracheight = oldheight - height;\n\n      if (this.gt(Decimal.dZero) && this.lte(1.44466786100976613366)) {\n        //similar to 0^^n, flip-flops between two values, converging slowly (or if it's below 0.06598803584531253708, never. so once again, the fractional part at the end will be a linear approximation (TODO: again pending knowledge of how to approximate better, although tbh I think it should in reality just be NaN)\n        height = Math.min(10000, height);\n\n        for (var i = 0; i < height; ++i) {\n          var old_payload = payload;\n          payload = this.pow(payload); //stop early if we converge\n\n          if (old_payload.eq(payload)) {\n            return payload;\n          }\n        }\n\n        if (fracheight != 0) {\n          var next_payload = this.pow(payload);\n          return payload.mul(1 - fracheight).add(next_payload.mul(fracheight));\n        }\n\n        return payload;\n      } //TODO: base < 0, but it's hard for me to reason about (probably all non-integer heights are NaN automatically?)\n\n\n      if (fracheight !== 0) {\n        if (payload.eq(Decimal.dOne)) {\n          //TODO: for bases above 10, revert to old linear approximation until I can think of something better\n          if (this.gt(10)) {\n            payload = this.pow(fracheight);\n          } else {\n            payload = D(Decimal.tetrate_critical(this.toNumber(), fracheight)); //TODO: until the critical section grid can handle numbers below 2, scale them to the base\n            //TODO: maybe once the critical section grid has very large bases, this math can be appropriate for them too? I'll think about it\n\n            if (this.lt(2)) {\n              payload = payload.sub(1).mul(this.minus(1)).plus(1);\n            }\n          }\n        } else {\n          if (this.eq(10)) {\n            payload = payload.layeradd10(fracheight);\n          } else {\n            payload = payload.layeradd(fracheight, this);\n          }\n        }\n      }\n\n      for (var _i = 0; _i < height; ++_i) {\n        payload = this.pow(payload); //bail if we're NaN\n\n        if (!isFinite(payload.layer) || !isFinite(payload.mag)) {\n          return payload.normalize();\n        } //shortcut\n\n\n        if (payload.layer - this.layer > 3) {\n          return FC_NN(payload.sign, payload.layer + (height - _i - 1), payload.mag);\n        } //give up after 10000 iterations if nothing is happening\n\n\n        if (_i > 10000) {\n          return payload;\n        }\n      }\n\n      return payload;\n    } //iteratedexp/iterated exponentiation: - all cases handled in tetrate, so just call it\n\n  }, {\n    key: \"iteratedexp\",\n    value: function iteratedexp() {\n      var height = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FC_NN(1, 0, 1);\n      return this.tetrate(height, payload);\n    } //iterated log/repeated log: The result of applying log(base) 'times' times in a row. Approximately equal to subtracting (times) from the number's slog representation. Equivalent to tetrating to a negative height.\n    //Works with negative and positive real heights.\n\n  }, {\n    key: \"iteratedlog\",\n    value: function iteratedlog() {\n      var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      if (times < 0) {\n        return Decimal.tetrate(base, -times, this);\n      }\n\n      base = D(base);\n      var result = D(this);\n      var fulltimes = times;\n      times = Math.trunc(times);\n      var fraction = fulltimes - times;\n\n      if (result.layer - base.layer > 3) {\n        var layerloss = Math.min(times, result.layer - base.layer - 3);\n        times -= layerloss;\n        result.layer -= layerloss;\n      }\n\n      for (var i = 0; i < times; ++i) {\n        result = result.log(base); //bail if we're NaN\n\n        if (!isFinite(result.layer) || !isFinite(result.mag)) {\n          return result.normalize();\n        } //give up after 10000 iterations if nothing is happening\n\n\n        if (i > 10000) {\n          return result;\n        }\n      } //handle fractional part\n\n\n      if (fraction > 0 && fraction < 1) {\n        if (base.eq(10)) {\n          result = result.layeradd10(-fraction);\n        } else {\n          result = result.layeradd(-fraction, base);\n        }\n      }\n\n      return result;\n    } //Super-logarithm, one of tetration's inverses, tells you what size power tower you'd have to tetrate base to to get number. By definition, will never be higher than 1.8e308 in break_eternity.js, since a power tower 1.8e308 numbers tall is the largest representable number.\n    // https://en.wikipedia.org/wiki/Super-logarithm\n\n  }, {\n    key: \"slog\",\n    value: function slog() {\n      var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      base = D(base); //special cases:\n      //slog base 0 or lower is NaN\n\n      if (base.lte(Decimal.dZero)) {\n        return Decimal.dNaN;\n      } //slog base 1 is NaN\n\n\n      if (base.eq(Decimal.dOne)) {\n        return Decimal.dNaN;\n      } //need to handle these small, wobbling bases specially\n\n\n      if (base.lt(Decimal.dOne)) {\n        if (this.eq(Decimal.dOne)) {\n          return Decimal.dZero;\n        }\n\n        if (this.eq(Decimal.dZero)) {\n          return Decimal.dNegOne;\n        } //0 < this < 1: ambiguous (happens multiple times)\n        //this < 0: impossible (as far as I can tell)\n        //this > 1: partially complex (http://myweb.astate.edu/wpaulsen/tetcalc/tetcalc.html base 0.25 for proof)\n\n\n        return Decimal.dNaN;\n      } //slog_n(0) is -1\n\n\n      if (this.mag < 0 || this.eq(Decimal.dZero)) {\n        return Decimal.dNegOne;\n      }\n\n      var result = 0;\n      var copy = D(this);\n\n      if (copy.layer - base.layer > 3) {\n        var layerloss = copy.layer - base.layer - 3;\n        result += layerloss;\n        copy.layer -= layerloss;\n      }\n\n      for (var i = 0; i < 100; ++i) {\n        if (copy.lt(Decimal.dZero)) {\n          copy = Decimal.pow(base, copy);\n          result -= 1;\n        } else if (copy.lte(Decimal.dOne)) {\n          return D(result + Decimal.slog_critical(base.toNumber(), copy.toNumber()));\n        } else {\n          result += 1;\n          copy = Decimal.log(copy, base);\n        }\n      }\n\n      return D(result);\n    } //background info and tables of values for critical functions taken here: https://github.com/Patashu/break_eternity.js/issues/22\n\n  }, {\n    key: \"layeradd10\",\n    value: //Function for adding/removing layers from a Decimal, even fractional layers (e.g. its slog10 representation).\n    //Moved this over to use the same critical section as tetrate/slog.\n    function layeradd10(diff) {\n      diff = Decimal.fromValue_noAlloc(diff).toNumber();\n      var result = D(this);\n\n      if (diff >= 1) {\n        //bug fix: if result is very smol (mag < 0, layer > 0) turn it into 0 first\n        if (result.mag < 0 && result.layer > 0) {\n          result.sign = 0;\n          result.mag = 0;\n          result.layer = 0;\n        } else if (result.sign === -1 && result.layer == 0) {\n          //bug fix - for stuff like -3.layeradd10(1) we need to move the sign to the mag\n          result.sign = 1;\n          result.mag = -result.mag;\n        }\n\n        var layeradd = Math.trunc(diff);\n        diff -= layeradd;\n        result.layer += layeradd;\n      }\n\n      if (diff <= -1) {\n        var _layeradd = Math.trunc(diff);\n\n        diff -= _layeradd;\n        result.layer += _layeradd;\n\n        if (result.layer < 0) {\n          for (var i = 0; i < 100; ++i) {\n            result.layer++;\n            result.mag = Math.log10(result.mag);\n\n            if (!isFinite(result.mag)) {\n              //another bugfix: if we hit -Infinity mag, then we should return negative infinity, not 0. 0.layeradd10(-1) h its this\n              if (result.sign === 0) {\n                result.sign = 1;\n              } //also this, for 0.layeradd10(-2)\n\n\n              if (result.layer < 0) {\n                result.layer = 0;\n              }\n\n              return result.normalize();\n            }\n\n            if (result.layer >= 0) {\n              break;\n            }\n          }\n        }\n      }\n\n      while (result.layer < 0) {\n        result.layer++;\n        result.mag = Math.log10(result.mag);\n      } //bugfix: before we normalize: if we started with 0, we now need to manually fix a layer ourselves!\n\n\n      if (result.sign === 0) {\n        result.sign = 1;\n\n        if (result.mag === 0 && result.layer >= 1) {\n          result.layer -= 1;\n          result.mag = 1;\n        }\n      }\n\n      result.normalize(); //layeradd10: like adding 'diff' to the number's slog(base) representation. Very similar to tetrate base 10 and iterated log base 10. Also equivalent to adding a fractional amount to the number's layer in its break_eternity.js representation.\n\n      if (diff !== 0) {\n        return result.layeradd(diff, 10); //safe, only calls positive height 1 payload tetration, slog and log\n      }\n\n      return result;\n    } //layeradd: like adding 'diff' to the number's slog(base) representation. Very similar to tetrate base 'base' and iterated log base 'base'.\n\n  }, {\n    key: \"layeradd\",\n    value: function layeradd(diff, base) {\n      var slogthis = this.slog(base).toNumber();\n      var slogdest = slogthis + diff;\n\n      if (slogdest >= 0) {\n        return Decimal.tetrate(base, slogdest);\n      } else if (!Number.isFinite(slogdest)) {\n        return Decimal.dNaN;\n      } else if (slogdest >= -1) {\n        return Decimal.log(Decimal.tetrate(base, slogdest + 1), base);\n      } else {\n        return Decimal.log(Decimal.log(Decimal.tetrate(base, slogdest + 2), base), base);\n      }\n    } //The Lambert W function, also called the omega function or product logarithm, is the solution W(x) === x*e^x.\n    // https://en.wikipedia.org/wiki/Lambert_W_function\n    //Some special values, for testing: https://en.wikipedia.org/wiki/Lambert_W_function#Special_values\n\n  }, {\n    key: \"lambertw\",\n    value: function lambertw() {\n      if (this.lt(-0.3678794411710499)) {\n        throw Error(\"lambertw is unimplemented for results less than -1, sorry!\");\n      } else if (this.mag < 0) {\n        return D(f_lambertw(this.toNumber()));\n      } else if (this.layer === 0) {\n        return D(f_lambertw(this.sign * this.mag));\n      } else if (this.layer === 1) {\n        return d_lambertw(this);\n      } else if (this.layer === 2) {\n        return d_lambertw(this);\n      }\n\n      if (this.layer >= 3) {\n        return FC_NN(this.sign, this.layer - 1, this.mag);\n      }\n\n      throw \"Unhandled behavior in lambertw()\";\n    } //The super square-root function - what number, tetrated to height 2, equals this?\n    //Other sroots are possible to calculate probably through guess and check methods, this one is easy though.\n    // https://en.wikipedia.org/wiki/Tetration#Super-root\n\n  }, {\n    key: \"ssqrt\",\n    value: function ssqrt() {\n      if (this.sign == 1 && this.layer >= 3) {\n        return FC_NN(this.sign, this.layer - 1, this.mag);\n      }\n\n      var lnx = this.ln();\n      return lnx.div(lnx.lambertw());\n    }\n    /*\r\n      Unit tests for tetrate/iteratedexp/iteratedlog/layeradd10/layeradd/slog:\r\n    (note: these won't be exactly precise with the new slog implementation, but that's okay)\r\n      for (var i = 0; i < 1000; ++i)\r\n    {\r\n    var first = Math.random()*100;\r\n    var both = Math.random()*100;\r\n    var expected = first+both+1;\r\n    var result = new Decimal(10).layeradd10(first).layeradd10(both).slog();\r\n    if (Number.isFinite(result.mag) && !Decimal.eq_tolerance(expected, result))\r\n    {\r\n        console.log(first + \", \" + both);\r\n    }\r\n    }\r\n      for (var i = 0; i < 1000; ++i)\r\n    {\r\n    var first = Math.random()*100;\r\n    var both = Math.random()*100;\r\n    first += both;\r\n    var expected = first-both+1;\r\n    var result = new Decimal(10).layeradd10(first).layeradd10(-both).slog();\r\n    if (Number.isFinite(result.mag) && !Decimal.eq_tolerance(expected, result))\r\n    {\r\n        console.log(first + \", \" + both);\r\n    }\r\n    }\r\n      for (var i = 0; i < 1000; ++i)\r\n    {\r\n    var first = Math.random()*100;\r\n    var both = Math.random()*100;\r\n    var base = Math.random()*8+2;\r\n    var expected = first+both+1;\r\n    var result = new Decimal(base).layeradd(first, base).layeradd(both, base).slog(base);\r\n    if (Number.isFinite(result.mag) && !Decimal.eq_tolerance(expected, result))\r\n    {\r\n        console.log(first + \", \" + both);\r\n    }\r\n    }\r\n      for (var i = 0; i < 1000; ++i)\r\n    {\r\n    var first = Math.random()*100;\r\n    var both = Math.random()*100;\r\n    var base = Math.random()*8+2;\r\n    first += both;\r\n    var expected = first-both+1;\r\n    var result = new Decimal(base).layeradd(first, base).layeradd(-both, base).slog(base);\r\n    if (Number.isFinite(result.mag) && !Decimal.eq_tolerance(expected, result))\r\n    {\r\n        console.log(first + \", \" + both);\r\n    }\r\n    }\r\n      for (var i = 0; i < 1000; ++i)\r\n    {\r\n    var first = Math.round((Math.random()*30))/10;\r\n    var both = Math.round((Math.random()*30))/10;\r\n    var tetrateonly = Decimal.tetrate(10, first);\r\n    var tetrateandlog = Decimal.tetrate(10, first+both).iteratedlog(10, both);\r\n    if (!Decimal.eq_tolerance(tetrateonly, tetrateandlog))\r\n    {\r\n    console.log(first + \", \" + both);\r\n    }\r\n    }\r\n      for (var i = 0; i < 1000; ++i)\r\n    {\r\n    var first = Math.round((Math.random()*30))/10;\r\n    var both = Math.round((Math.random()*30))/10;\r\n    var base = Math.random()*8+2;\r\n    var tetrateonly = Decimal.tetrate(base, first);\r\n    var tetrateandlog = Decimal.tetrate(base, first+both).iteratedlog(base, both);\r\n    if (!Decimal.eq_tolerance(tetrateonly, tetrateandlog))\r\n    {\r\n    console.log(first + \", \" + both);\r\n    }\r\n    }\r\n      for (var i = 0; i < 1000; ++i)\r\n    {\r\n    var first = Math.round((Math.random()*30))/10;\r\n    var both = Math.round((Math.random()*30))/10;\r\n    var base = Math.random()*8+2;\r\n    var tetrateonly = Decimal.tetrate(base, first, base);\r\n    var tetrateandlog = Decimal.tetrate(base, first+both, base).iteratedlog(base, both);\r\n    if (!Decimal.eq_tolerance(tetrateonly, tetrateandlog))\r\n    {\r\n    console.log(first + \", \" + both);\r\n    }\r\n    }\r\n      for (var i = 0; i < 1000; ++i)\r\n    {\r\n    var xex = new Decimal(-0.3678794411710499+Math.random()*100);\r\n    var x = Decimal.lambertw(xex);\r\n    if (!Decimal.eq_tolerance(xex, x.mul(Decimal.exp(x))))\r\n    {\r\n        console.log(xex);\r\n    }\r\n    }\r\n      for (var i = 0; i < 1000; ++i)\r\n    {\r\n    var xex = new Decimal(-0.3678794411710499+Math.exp(Math.random()*100));\r\n    var x = Decimal.lambertw(xex);\r\n    if (!Decimal.eq_tolerance(xex, x.mul(Decimal.exp(x))))\r\n    {\r\n        console.log(xex);\r\n    }\r\n    }\r\n      for (var i = 0; i < 1000; ++i)\r\n    {\r\n    var a = Decimal.randomDecimalForTesting(Math.random() > 0.5 ? 0 : 1);\r\n    var b = Decimal.randomDecimalForTesting(Math.random() > 0.5 ? 0 : 1);\r\n    if (Math.random() > 0.5) { a = a.recip(); }\r\n    if (Math.random() > 0.5) { b = b.recip(); }\r\n    var c = a.add(b).toNumber();\r\n    if (Number.isFinite(c) && !Decimal.eq_tolerance(c, a.toNumber()+b.toNumber()))\r\n    {\r\n        console.log(a + \", \" + b);\r\n    }\r\n    }\r\n      for (var i = 0; i < 100; ++i)\r\n    {\r\n    var a = Decimal.randomDecimalForTesting(Math.round(Math.random()*4));\r\n    var b = Decimal.randomDecimalForTesting(Math.round(Math.random()*4));\r\n    if (Math.random() > 0.5) { a = a.recip(); }\r\n    if (Math.random() > 0.5) { b = b.recip(); }\r\n    var c = a.mul(b).toNumber();\r\n    if (Number.isFinite(c) && Number.isFinite(a.toNumber()) && Number.isFinite(b.toNumber()) && a.toNumber() != 0 && b.toNumber() != 0 && c != 0 && !Decimal.eq_tolerance(c, a.toNumber()*b.toNumber()))\r\n    {\r\n        console.log(\"Test 1: \" + a + \", \" + b);\r\n    }\r\n    else if (!Decimal.mul(a.recip(), b.recip()).eq_tolerance(Decimal.mul(a, b).recip()))\r\n    {\r\n        console.log(\"Test 3: \" + a + \", \" + b);\r\n    }\r\n    }\r\n      for (var i = 0; i < 10; ++i)\r\n    {\r\n    var a = Decimal.randomDecimalForTesting(Math.round(Math.random()*4));\r\n    var b = Decimal.randomDecimalForTesting(Math.round(Math.random()*4));\r\n    if (Math.random() > 0.5 && a.sign !== 0) { a = a.recip(); }\r\n    if (Math.random() > 0.5 && b.sign !== 0) { b = b.recip(); }\r\n    var c = a.pow(b);\r\n    var d = a.root(b.recip());\r\n    var e = a.pow(b.recip());\r\n    var f = a.root(b);\r\n        if (!c.eq_tolerance(d) && a.sign !== 0 && b.sign !== 0)\r\n    {\r\n      console.log(\"Test 1: \" + a + \", \" + b);\r\n    }\r\n    if (!e.eq_tolerance(f) && a.sign !== 0 && b.sign !== 0)\r\n    {\r\n      console.log(\"Test 2: \" + a + \", \" + b);\r\n    }\r\n    }\r\n      for (var i = 0; i < 10; ++i)\r\n    {\r\n    var a = Math.round(Math.random()*18-9);\r\n    var b = Math.round(Math.random()*100-50);\r\n    var c = Math.round(Math.random()*18-9);\r\n    var d = Math.round(Math.random()*100-50);\r\n    console.log(\"Decimal.pow(Decimal.fromMantissaExponent(\" + a + \", \" + b + \"), Decimal.fromMantissaExponent(\" + c + \", \" + d + \")).toString()\");\r\n    }\r\n      */\n    //Pentation/pentate: The result of tetrating 'height' times in a row. An absurdly strong operator - Decimal.pentate(2, 4.28) and Decimal.pentate(10, 2.37) are already too huge for break_eternity.js!\n    // https://en.wikipedia.org/wiki/Pentation\n\n  }, {\n    key: \"pentate\",\n    value: function pentate() {\n      var height = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FC_NN(1, 0, 1);\n      payload = D(payload);\n      var oldheight = height;\n      height = Math.trunc(height);\n      var fracheight = oldheight - height; //I have no idea if this is a meaningful approximation for pentation to continuous heights, but it is monotonic and continuous.\n\n      if (fracheight !== 0) {\n        if (payload.eq(Decimal.dOne)) {\n          ++height;\n          payload = new Decimal(fracheight);\n        } else {\n          if (this.eq(10)) {\n            payload = payload.layeradd10(fracheight);\n          } else {\n            payload = payload.layeradd(fracheight, this);\n          }\n        }\n      }\n\n      for (var i = 0; i < height; ++i) {\n        payload = this.tetrate(payload.toNumber()); //bail if we're NaN\n\n        if (!isFinite(payload.layer) || !isFinite(payload.mag)) {\n          return payload.normalize();\n        } //give up after 10 iterations if nothing is happening\n\n\n        if (i > 10) {\n          return payload;\n        }\n      }\n\n      return payload;\n    } // trig functions!\n\n  }, {\n    key: \"sin\",\n    value: function sin() {\n      if (this.mag < 0) {\n        return this;\n      }\n\n      if (this.layer === 0) {\n        return D(Math.sin(this.sign * this.mag));\n      }\n\n      return FC_NN(0, 0, 0);\n    }\n  }, {\n    key: \"cos\",\n    value: function cos() {\n      if (this.mag < 0) {\n        return Decimal.dOne;\n      }\n\n      if (this.layer === 0) {\n        return D(Math.cos(this.sign * this.mag));\n      }\n\n      return FC_NN(0, 0, 0);\n    }\n  }, {\n    key: \"tan\",\n    value: function tan() {\n      if (this.mag < 0) {\n        return this;\n      }\n\n      if (this.layer === 0) {\n        return D(Math.tan(this.sign * this.mag));\n      }\n\n      return FC_NN(0, 0, 0);\n    }\n  }, {\n    key: \"asin\",\n    value: function asin() {\n      if (this.mag < 0) {\n        return this;\n      }\n\n      if (this.layer === 0) {\n        return D(Math.asin(this.sign * this.mag));\n      }\n\n      return FC_NN(Number.NaN, Number.NaN, Number.NaN);\n    }\n  }, {\n    key: \"acos\",\n    value: function acos() {\n      if (this.mag < 0) {\n        return D(Math.acos(this.toNumber()));\n      }\n\n      if (this.layer === 0) {\n        return D(Math.acos(this.sign * this.mag));\n      }\n\n      return FC_NN(Number.NaN, Number.NaN, Number.NaN);\n    }\n  }, {\n    key: \"atan\",\n    value: function atan() {\n      if (this.mag < 0) {\n        return this;\n      }\n\n      if (this.layer === 0) {\n        return D(Math.atan(this.sign * this.mag));\n      }\n\n      return D(Math.atan(this.sign * 1.8e308));\n    }\n  }, {\n    key: \"sinh\",\n    value: function sinh() {\n      return this.exp().sub(this.negate().exp()).div(2);\n    }\n  }, {\n    key: \"cosh\",\n    value: function cosh() {\n      return this.exp().add(this.negate().exp()).div(2);\n    }\n  }, {\n    key: \"tanh\",\n    value: function tanh() {\n      return this.sinh().div(this.cosh());\n    }\n  }, {\n    key: \"asinh\",\n    value: function asinh() {\n      return Decimal.ln(this.add(this.sqr().add(1).sqrt()));\n    }\n  }, {\n    key: \"acosh\",\n    value: function acosh() {\n      return Decimal.ln(this.add(this.sqr().sub(1).sqrt()));\n    }\n  }, {\n    key: \"atanh\",\n    value: function atanh() {\n      if (this.abs().gte(1)) {\n        return FC_NN(Number.NaN, Number.NaN, Number.NaN);\n      }\n\n      return Decimal.ln(this.add(1).div(D(1).sub(this))).div(2);\n    }\n    /**\r\n     * Joke function from Realm Grinder\r\n     */\n\n  }, {\n    key: \"ascensionPenalty\",\n    value: function ascensionPenalty(ascensions) {\n      if (ascensions === 0) {\n        return this;\n      }\n\n      return this.root(Decimal.pow(10, ascensions));\n    }\n    /**\r\n     * Joke function from Cookie Clicker. It's 'egg'\r\n     */\n\n  }, {\n    key: \"egg\",\n    value: function egg() {\n      return this.add(9);\n    }\n  }, {\n    key: \"lessThanOrEqualTo\",\n    value: function lessThanOrEqualTo(other) {\n      return this.cmp(other) < 1;\n    }\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(other) {\n      return this.cmp(other) < 0;\n    }\n  }, {\n    key: \"greaterThanOrEqualTo\",\n    value: function greaterThanOrEqualTo(other) {\n      return this.cmp(other) > -1;\n    }\n  }, {\n    key: \"greaterThan\",\n    value: function greaterThan(other) {\n      return this.cmp(other) > 0;\n    }\n  }], [{\n    key: \"fromComponents\",\n    value: function fromComponents(sign, layer, mag) {\n      return new Decimal().fromComponents(sign, layer, mag);\n    }\n  }, {\n    key: \"fromComponents_noNormalize\",\n    value: function fromComponents_noNormalize(sign, layer, mag) {\n      return new Decimal().fromComponents_noNormalize(sign, layer, mag);\n    }\n  }, {\n    key: \"fromMantissaExponent\",\n    value: function fromMantissaExponent(mantissa, exponent) {\n      return new Decimal().fromMantissaExponent(mantissa, exponent);\n    }\n  }, {\n    key: \"fromMantissaExponent_noNormalize\",\n    value: function fromMantissaExponent_noNormalize(mantissa, exponent) {\n      return new Decimal().fromMantissaExponent_noNormalize(mantissa, exponent);\n    }\n  }, {\n    key: \"fromDecimal\",\n    value: function fromDecimal(value) {\n      return new Decimal().fromDecimal(value);\n    }\n  }, {\n    key: \"fromNumber\",\n    value: function fromNumber(value) {\n      return new Decimal().fromNumber(value);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      return new Decimal().fromString(value);\n    }\n  }, {\n    key: \"fromValue\",\n    value: function fromValue(value) {\n      return new Decimal().fromValue(value);\n    }\n  }, {\n    key: \"fromValue_noAlloc\",\n    value: function fromValue_noAlloc(value) {\n      return value instanceof Decimal ? value : new Decimal(value);\n    }\n  }, {\n    key: \"abs\",\n    value: function abs(value) {\n      return D(value).abs();\n    }\n  }, {\n    key: \"neg\",\n    value: function neg(value) {\n      return D(value).neg();\n    }\n  }, {\n    key: \"negate\",\n    value: function negate(value) {\n      return D(value).neg();\n    }\n  }, {\n    key: \"negated\",\n    value: function negated(value) {\n      return D(value).neg();\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(value) {\n      return D(value).sign;\n    }\n  }, {\n    key: \"sgn\",\n    value: function sgn(value) {\n      return D(value).sign;\n    }\n  }, {\n    key: \"round\",\n    value: function round(value) {\n      return D(value).round();\n    }\n  }, {\n    key: \"floor\",\n    value: function floor(value) {\n      return D(value).floor();\n    }\n  }, {\n    key: \"ceil\",\n    value: function ceil(value) {\n      return D(value).ceil();\n    }\n  }, {\n    key: \"trunc\",\n    value: function trunc(value) {\n      return D(value).trunc();\n    }\n  }, {\n    key: \"add\",\n    value: function add(value, other) {\n      return D(value).add(other);\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(value, other) {\n      return D(value).add(other);\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(value, other) {\n      return D(value).sub(other);\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(value, other) {\n      return D(value).sub(other);\n    }\n  }, {\n    key: \"minus\",\n    value: function minus(value, other) {\n      return D(value).sub(other);\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(value, other) {\n      return D(value).mul(other);\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(value, other) {\n      return D(value).mul(other);\n    }\n  }, {\n    key: \"times\",\n    value: function times(value, other) {\n      return D(value).mul(other);\n    }\n  }, {\n    key: \"div\",\n    value: function div(value, other) {\n      return D(value).div(other);\n    }\n  }, {\n    key: \"divide\",\n    value: function divide(value, other) {\n      return D(value).div(other);\n    }\n  }, {\n    key: \"recip\",\n    value: function recip(value) {\n      return D(value).recip();\n    }\n  }, {\n    key: \"reciprocal\",\n    value: function reciprocal(value) {\n      return D(value).recip();\n    }\n  }, {\n    key: \"reciprocate\",\n    value: function reciprocate(value) {\n      return D(value).reciprocate();\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(value, other) {\n      return D(value).cmp(other);\n    }\n  }, {\n    key: \"cmpabs\",\n    value: function cmpabs(value, other) {\n      return D(value).cmpabs(other);\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(value, other) {\n      return D(value).cmp(other);\n    }\n  }, {\n    key: \"isNaN\",\n    value: function (_isNaN) {\n      function isNaN(_x) {\n        return _isNaN.apply(this, arguments);\n      }\n\n      isNaN.toString = function () {\n        return _isNaN.toString();\n      };\n\n      return isNaN;\n    }(function (value) {\n      value = D(value);\n      return isNaN(value.sign) || isNaN(value.layer) || isNaN(value.mag);\n    })\n  }, {\n    key: \"isFinite\",\n    value: function (_isFinite) {\n      function isFinite(_x2) {\n        return _isFinite.apply(this, arguments);\n      }\n\n      isFinite.toString = function () {\n        return _isFinite.toString();\n      };\n\n      return isFinite;\n    }(function (value) {\n      value = D(value);\n      return isFinite(value.sign) && isFinite(value.layer) && isFinite(value.mag);\n    })\n  }, {\n    key: \"eq\",\n    value: function eq(value, other) {\n      return D(value).eq(other);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(value, other) {\n      return D(value).eq(other);\n    }\n  }, {\n    key: \"neq\",\n    value: function neq(value, other) {\n      return D(value).neq(other);\n    }\n  }, {\n    key: \"notEquals\",\n    value: function notEquals(value, other) {\n      return D(value).notEquals(other);\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(value, other) {\n      return D(value).lt(other);\n    }\n  }, {\n    key: \"lte\",\n    value: function lte(value, other) {\n      return D(value).lte(other);\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(value, other) {\n      return D(value).gt(other);\n    }\n  }, {\n    key: \"gte\",\n    value: function gte(value, other) {\n      return D(value).gte(other);\n    }\n  }, {\n    key: \"max\",\n    value: function max(value, other) {\n      return D(value).max(other);\n    }\n  }, {\n    key: \"min\",\n    value: function min(value, other) {\n      return D(value).min(other);\n    }\n  }, {\n    key: \"minabs\",\n    value: function minabs(value, other) {\n      return D(value).minabs(other);\n    }\n  }, {\n    key: \"maxabs\",\n    value: function maxabs(value, other) {\n      return D(value).maxabs(other);\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(value, min, max) {\n      return D(value).clamp(min, max);\n    }\n  }, {\n    key: \"clampMin\",\n    value: function clampMin(value, min) {\n      return D(value).clampMin(min);\n    }\n  }, {\n    key: \"clampMax\",\n    value: function clampMax(value, max) {\n      return D(value).clampMax(max);\n    }\n  }, {\n    key: \"cmp_tolerance\",\n    value: function cmp_tolerance(value, other, tolerance) {\n      return D(value).cmp_tolerance(other, tolerance);\n    }\n  }, {\n    key: \"compare_tolerance\",\n    value: function compare_tolerance(value, other, tolerance) {\n      return D(value).cmp_tolerance(other, tolerance);\n    }\n  }, {\n    key: \"eq_tolerance\",\n    value: function eq_tolerance(value, other, tolerance) {\n      return D(value).eq_tolerance(other, tolerance);\n    }\n  }, {\n    key: \"equals_tolerance\",\n    value: function equals_tolerance(value, other, tolerance) {\n      return D(value).eq_tolerance(other, tolerance);\n    }\n  }, {\n    key: \"neq_tolerance\",\n    value: function neq_tolerance(value, other, tolerance) {\n      return D(value).neq_tolerance(other, tolerance);\n    }\n  }, {\n    key: \"notEquals_tolerance\",\n    value: function notEquals_tolerance(value, other, tolerance) {\n      return D(value).notEquals_tolerance(other, tolerance);\n    }\n  }, {\n    key: \"lt_tolerance\",\n    value: function lt_tolerance(value, other, tolerance) {\n      return D(value).lt_tolerance(other, tolerance);\n    }\n  }, {\n    key: \"lte_tolerance\",\n    value: function lte_tolerance(value, other, tolerance) {\n      return D(value).lte_tolerance(other, tolerance);\n    }\n  }, {\n    key: \"gt_tolerance\",\n    value: function gt_tolerance(value, other, tolerance) {\n      return D(value).gt_tolerance(other, tolerance);\n    }\n  }, {\n    key: \"gte_tolerance\",\n    value: function gte_tolerance(value, other, tolerance) {\n      return D(value).gte_tolerance(other, tolerance);\n    }\n  }, {\n    key: \"pLog10\",\n    value: function pLog10(value) {\n      return D(value).pLog10();\n    }\n  }, {\n    key: \"absLog10\",\n    value: function absLog10(value) {\n      return D(value).absLog10();\n    }\n  }, {\n    key: \"log10\",\n    value: function log10(value) {\n      return D(value).log10();\n    }\n  }, {\n    key: \"log\",\n    value: function log(value, base) {\n      return D(value).log(base);\n    }\n  }, {\n    key: \"log2\",\n    value: function log2(value) {\n      return D(value).log2();\n    }\n  }, {\n    key: \"ln\",\n    value: function ln(value) {\n      return D(value).ln();\n    }\n  }, {\n    key: \"logarithm\",\n    value: function logarithm(value, base) {\n      return D(value).logarithm(base);\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(value, other) {\n      return D(value).pow(other);\n    }\n  }, {\n    key: \"pow10\",\n    value: function pow10(value) {\n      return D(value).pow10();\n    }\n  }, {\n    key: \"root\",\n    value: function root(value, other) {\n      return D(value).root(other);\n    }\n  }, {\n    key: \"factorial\",\n    value: function factorial(value, _other) {\n      return D(value).factorial();\n    }\n  }, {\n    key: \"gamma\",\n    value: function gamma(value, _other) {\n      return D(value).gamma();\n    }\n  }, {\n    key: \"lngamma\",\n    value: function lngamma(value, _other) {\n      return D(value).lngamma();\n    }\n  }, {\n    key: \"exp\",\n    value: function exp(value) {\n      return D(value).exp();\n    }\n  }, {\n    key: \"sqr\",\n    value: function sqr(value) {\n      return D(value).sqr();\n    }\n  }, {\n    key: \"sqrt\",\n    value: function sqrt(value) {\n      return D(value).sqrt();\n    }\n  }, {\n    key: \"cube\",\n    value: function cube(value) {\n      return D(value).cube();\n    }\n  }, {\n    key: \"cbrt\",\n    value: function cbrt(value) {\n      return D(value).cbrt();\n    }\n  }, {\n    key: \"tetrate\",\n    value: function tetrate(value) {\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : FC_NN(1, 0, 1);\n      return D(value).tetrate(height, payload);\n    }\n  }, {\n    key: \"iteratedexp\",\n    value: function iteratedexp(value) {\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : FC_NN(1, 0, 1);\n      return D(value).iteratedexp(height, payload);\n    }\n  }, {\n    key: \"iteratedlog\",\n    value: function iteratedlog(value) {\n      var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n      var times = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      return D(value).iteratedlog(base, times);\n    }\n  }, {\n    key: \"layeradd10\",\n    value: function layeradd10(value, diff) {\n      return D(value).layeradd10(diff);\n    }\n  }, {\n    key: \"layeradd\",\n    value: function layeradd(value, diff) {\n      var base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n      return D(value).layeradd(diff, base);\n    }\n  }, {\n    key: \"slog\",\n    value: function slog(value) {\n      var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n      return D(value).slog(base);\n    }\n  }, {\n    key: \"lambertw\",\n    value: function lambertw(value) {\n      return D(value).lambertw();\n    }\n  }, {\n    key: \"ssqrt\",\n    value: function ssqrt(value) {\n      return D(value).ssqrt();\n    }\n  }, {\n    key: \"pentate\",\n    value: function pentate(value) {\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : FC_NN(1, 0, 1);\n      return D(value).pentate(height, payload);\n    }\n    /**\r\n     * If you're willing to spend 'resourcesAvailable' and want to buy something\r\n     * with exponentially increasing cost each purchase (start at priceStart,\r\n     * multiply by priceRatio, already own currentOwned), how much of it can you buy?\r\n     * Adapted from Trimps source code.\r\n     */\n\n  }, {\n    key: \"affordGeometricSeries\",\n    value: function affordGeometricSeries(resourcesAvailable, priceStart, priceRatio, currentOwned) {\n      return this.affordGeometricSeries_core(D(resourcesAvailable), D(priceStart), D(priceRatio), currentOwned);\n    }\n    /**\r\n     * How much resource would it cost to buy (numItems) items if you already have currentOwned,\r\n     * the initial price is priceStart and it multiplies by priceRatio each purchase?\r\n     */\n\n  }, {\n    key: \"sumGeometricSeries\",\n    value: function sumGeometricSeries(numItems, priceStart, priceRatio, currentOwned) {\n      return this.sumGeometricSeries_core(numItems, D(priceStart), D(priceRatio), currentOwned);\n    }\n    /**\r\n     * If you're willing to spend 'resourcesAvailable' and want to buy something with additively\r\n     * increasing cost each purchase (start at priceStart, add by priceAdd, already own currentOwned),\r\n     * how much of it can you buy?\r\n     */\n\n  }, {\n    key: \"affordArithmeticSeries\",\n    value: function affordArithmeticSeries(resourcesAvailable, priceStart, priceAdd, currentOwned) {\n      return this.affordArithmeticSeries_core(D(resourcesAvailable), D(priceStart), D(priceAdd), D(currentOwned));\n    }\n    /**\r\n     * How much resource would it cost to buy (numItems) items if you already have currentOwned,\r\n     * the initial price is priceStart and it adds priceAdd each purchase?\r\n     * Adapted from http://www.mathwords.com/a/arithmetic_series.htm\r\n     */\n\n  }, {\n    key: \"sumArithmeticSeries\",\n    value: function sumArithmeticSeries(numItems, priceStart, priceAdd, currentOwned) {\n      return this.sumArithmeticSeries_core(D(numItems), D(priceStart), D(priceAdd), D(currentOwned));\n    }\n    /**\r\n     * When comparing two purchases that cost (resource) and increase your resource/sec by (deltaRpS),\r\n     * the lowest efficiency score is the better one to purchase.\r\n     * From Frozen Cookies:\r\n     * http://cookieclicker.wikia.com/wiki/Frozen_Cookies_(JavaScript_Add-on)#Efficiency.3F_What.27s_that.3F\r\n     */\n\n  }, {\n    key: \"efficiencyOfPurchase\",\n    value: function efficiencyOfPurchase(cost, currentRpS, deltaRpS) {\n      return this.efficiencyOfPurchase_core(D(cost), D(currentRpS), D(deltaRpS));\n    }\n  }, {\n    key: \"randomDecimalForTesting\",\n    value: function randomDecimalForTesting(maxLayers) {\n      // NOTE: This doesn't follow any kind of sane random distribution, so use this for testing purposes only.\n      //5% of the time, return 0\n      if (Math.random() * 20 < 1) {\n        return FC_NN(0, 0, 0);\n      }\n\n      var randomsign = Math.random() > 0.5 ? 1 : -1; //5% of the time, return 1 or -1\n\n      if (Math.random() * 20 < 1) {\n        return FC_NN(randomsign, 0, 1);\n      } //pick a random layer\n\n\n      var layer = Math.floor(Math.random() * (maxLayers + 1));\n      var randomexp = layer === 0 ? Math.random() * 616 - 308 : Math.random() * 16; //10% of the time, make it a simple power of 10\n\n      if (Math.random() > 0.9) {\n        randomexp = Math.trunc(randomexp);\n      }\n\n      var randommag = Math.pow(10, randomexp); //10% of the time, trunc mag\n\n      if (Math.random() > 0.9) {\n        randommag = Math.trunc(randommag);\n      }\n\n      return FC(randomsign, layer, randommag);\n    }\n  }, {\n    key: \"affordGeometricSeries_core\",\n    value: function affordGeometricSeries_core(resourcesAvailable, priceStart, priceRatio, currentOwned) {\n      var actualStart = priceStart.mul(priceRatio.pow(currentOwned));\n      return Decimal.floor(resourcesAvailable.div(actualStart).mul(priceRatio.sub(1)).add(1).log10().div(priceRatio.log10()));\n    }\n  }, {\n    key: \"sumGeometricSeries_core\",\n    value: function sumGeometricSeries_core(numItems, priceStart, priceRatio, currentOwned) {\n      return priceStart.mul(priceRatio.pow(currentOwned)).mul(Decimal.sub(1, priceRatio.pow(numItems))).div(Decimal.sub(1, priceRatio));\n    }\n  }, {\n    key: \"affordArithmeticSeries_core\",\n    value: function affordArithmeticSeries_core(resourcesAvailable, priceStart, priceAdd, currentOwned) {\n      // n = (-(a-d/2) + sqrt((a-d/2)^2+2dS))/d\n      // where a is actualStart, d is priceAdd and S is resourcesAvailable\n      // then floor it and you're done!\n      var actualStart = priceStart.add(currentOwned.mul(priceAdd));\n      var b = actualStart.sub(priceAdd.div(2));\n      var b2 = b.pow(2);\n      return b.neg().add(b2.add(priceAdd.mul(resourcesAvailable).mul(2)).sqrt()).div(priceAdd).floor();\n    }\n  }, {\n    key: \"sumArithmeticSeries_core\",\n    value: function sumArithmeticSeries_core(numItems, priceStart, priceAdd, currentOwned) {\n      var actualStart = priceStart.add(currentOwned.mul(priceAdd)); // (n/2)*(2*a+(n-1)*d)\n\n      return numItems.div(2).mul(actualStart.mul(2).plus(numItems.sub(1).mul(priceAdd)));\n    }\n  }, {\n    key: \"efficiencyOfPurchase_core\",\n    value: function efficiencyOfPurchase_core(cost, currentRpS, deltaRpS) {\n      return cost.div(currentRpS).add(cost.div(deltaRpS));\n    }\n  }, {\n    key: \"slog_critical\",\n    value: function slog_critical(base, height) {\n      //TODO: for bases above 10, revert to old linear approximation until I can think of something better\n      if (base > 10) {\n        return height - 1;\n      }\n\n      return Decimal.critical_section(base, height, critical_slog_values);\n    }\n  }, {\n    key: \"tetrate_critical\",\n    value: function tetrate_critical(base, height) {\n      return Decimal.critical_section(base, height, critical_tetr_values);\n    }\n  }, {\n    key: \"critical_section\",\n    value: function critical_section(base, height, grid) {\n      //this part is simple at least, since it's just 0.1 to 0.9\n      height *= 10;\n\n      if (height < 0) {\n        height = 0;\n      }\n\n      if (height > 10) {\n        height = 10;\n      } //have to do this complicated song and dance since one of the critical_headers is Math.E, and in the future I'd like 1.5 as well\n\n\n      if (base < 2) {\n        base = 2;\n      }\n\n      if (base > 10) {\n        base = 10;\n      }\n\n      var lower = 0;\n      var upper = 0; //basically, if we're between bases, we interpolate each bases' relevant values together\n      //then we interpolate based on what the fractional height is.\n      //accuracy could be improved by doing a non-linear interpolation (maybe), by adding more bases and heights (definitely) but this is AFAIK the best you can get without running some pari.gp or mathematica program to calculate exact values\n\n      for (var i = 0; i < critical_headers.length; ++i) {\n        if (critical_headers[i] == base) // exact match\n          {\n            lower = grid[i][Math.floor(height)];\n            upper = grid[i][Math.ceil(height)];\n            break;\n          } else if (critical_headers[i] < base && critical_headers[i + 1] > base) // interpolate between this and the next\n          {\n            var basefrac = (base - critical_headers[i]) / (critical_headers[i + 1] - critical_headers[i]);\n            lower = grid[i][Math.floor(height)] * (1 - basefrac) + grid[i + 1][Math.floor(height)] * basefrac;\n            upper = grid[i][Math.ceil(height)] * (1 - basefrac) + grid[i + 1][Math.ceil(height)] * basefrac;\n            break;\n          }\n      }\n\n      var frac = height - Math.floor(height);\n      var result = lower * (1 - frac) + upper * frac;\n      return result;\n    }\n  }]);\n\n  return Decimal;\n}();\nDecimal.dZero = FC_NN(0, 0, 0);\nDecimal.dOne = FC_NN(1, 0, 1);\nDecimal.dNegOne = FC_NN(-1, 0, 1);\nDecimal.dTwo = FC_NN(1, 0, 2);\nDecimal.dTen = FC_NN(1, 0, 10);\nDecimal.dNaN = FC_NN(Number.NaN, Number.NaN, Number.NaN);\nDecimal.dInf = FC_NN(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\nDecimal.dNegInf = FC_NN(-1, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\nDecimal.dNumberMax = FC(1, 0, Number.MAX_VALUE);\nDecimal.dNumberMin = FC(1, 0, Number.MIN_VALUE); // return Decimal;\n\nexport { Decimal as default };\n","//Original .js file from Acamadea\r\nimport Decimal from 'break_eternity.js';\r\nfunction exponentialFormat(num:any, precision:number, mantissa:boolean = true) {\r\n    let e = num.log10().floor()\r\n    let m = num.div(Decimal.pow(10, e))\r\n    if (m.toStringWithDecimalPlaces(precision) === 10) {\r\n        m = new Decimal(1)\r\n        e = e.add(1)\r\n    }\r\n    e = (e.gte(1e9) ? format(e, 3) : (e.gte(10000) ? commaFormat(e, 0) : e.toStringWithDecimalPlaces(0)))\r\n    if (mantissa)\r\n        return m.toStringWithDecimalPlaces(precision) + \"e\" + e\r\n    else return \"e\" + e\r\n}\r\n\r\nfunction commaFormat(num:any, precision:number) {\r\n    if (num === null || num === undefined) return \"NaN\"\r\n    if (num.mag < 0.001) return (0).toFixed(precision)\r\n    let init = num.toStringWithDecimalPlaces(precision)\r\n    let portions = init.split(\".\")\r\n    portions[0] = portions[0].replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\")\r\n    if (portions.length === 1) return portions[0]\r\n    return portions[0] + \".\" + portions[1]\r\n}\r\n\r\n\r\nfunction regularFormat(num:any, precision:number,) {\r\n    if (num === null || num === undefined) return \"NaN\"\r\n    if (num.mag < 0.0001) return (0).toFixed(precision)\r\n    if (num.mag < 0.1 && precision !==0) precision = Math.max(precision, 4)\r\n    return num.toStringWithDecimalPlaces(precision)\r\n}\r\nexport function format(decimal:any, precision:number = 2) : string {\r\n    decimal = new Decimal(decimal)\r\n        if (isNaN(decimal)) return  '[ERROR]: NaN'\r\n        if (decimal.sign < 0) return \"-\" + format(decimal.neg(), precision)\r\n        if (decimal.mag === Number.POSITIVE_INFINITY) return \"Infinity\"\r\n        if (decimal.gte(\"eeee1000\")) {\r\n            let slog = decimal.slog()\r\n            if (slog.gte(1e6)) return \"F\" + format(slog.floor())\r\n            else return Decimal.pow(10, slog.sub(slog.floor())).toStringWithDecimalPlaces(3) + \"F\" + commaFormat(slog.floor(), 0)\r\n        } else if (decimal.gte(\"1e1000000\")) return exponentialFormat(decimal, 0, false)\r\n        else if (decimal.gte(\"1e10000\")) return exponentialFormat(decimal, 0)\r\n        else if (decimal.gte(1e6)) return exponentialFormat(decimal, precision)\r\n        else if (decimal.gte(1e3)) return commaFormat(decimal, 0)\r\n        else if (decimal.gte(0.0001)) return regularFormat(decimal, precision)\r\n        else if (decimal.eq(0)) return (0).toFixed(precision)\r\n\r\n        decimal = invertOOM(decimal)\r\n        let val = \"\"\r\n        if (decimal.lt(\"1e1000\")) {\r\n            val = exponentialFormat(decimal, precision)\r\n            return val.replace(/([^(?:e|F)]*)$/, '-$1')\r\n        } else\r\n            return format(decimal, precision) + \"⁻¹\"\r\n}\r\n\r\nexport function formatWhole(decimal:any) {\r\n    decimal = new Decimal(decimal)\r\n    if (decimal.gte(1e9)) return format(decimal, 2)\r\n    if (decimal.lte(0.99) && !decimal.eq(0)) return format(decimal, 2)\r\n    return format(decimal, 0)\r\n}\r\n\r\nexport function formatTime(s:number) {\r\n    if (s < 60) return format(s) + \"s\"\r\n    else if (s < 3600) return formatWhole(Math.floor(s / 60)) + \"m \" + format(s % 60) + \"s\"\r\n    else if (s < 86400) return formatWhole(Math.floor(s / 3600)) + \"h \" + formatWhole(Math.floor(s / 60) % 60) + \"m \" + format(s % 60) + \"s\"\r\n    else if (s < 31536000) return formatWhole(Math.floor(s / 86400) % 365) + \"d \" + formatWhole(Math.floor(s / 3600) % 24) + \"h \" + formatWhole(Math.floor(s / 60) % 60) + \"m \" + format(s % 60) + \"s\"\r\n    else return formatWhole(Math.floor(s / 31536000)) + \"y \" + formatWhole(Math.floor(s / 86400) % 365) + \"d \" + formatWhole(Math.floor(s / 3600) % 24) + \"h \" + formatWhole(Math.floor(s / 60) % 60) + \"m \" + format(s % 60) + \"s\"\r\n}\r\n\r\nfunction toPlaces(x:Decimal, precision:number, maxAccepted:number) {\r\n    x = new Decimal(x)\r\n    let result = x.toStringWithDecimalPlaces(precision)\r\n    if (new Decimal(result).gte(maxAccepted)) {\r\n        result = new Decimal(maxAccepted - Math.pow(0.1, precision)).toStringWithDecimalPlaces(precision)\r\n    }\r\n    return result\r\n}\r\n\r\n// Will also display very small numbers\r\nfunction formatSmall(x:any, precision=2) {\r\n    //return format(x, precision, true)\r\n}\r\n\r\nfunction invertOOM(x:Decimal){\r\n    let e = x.log10().ceil()\r\n    let m = x.div(Decimal.pow(10, e))\r\n    e = e.neg()\r\n    x = new Decimal(10).pow(e).times(m)\r\n\r\n    return x\r\n}"]}